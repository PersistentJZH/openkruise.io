"use strict";(self.webpackChunkopenkruise_io=self.webpackChunkopenkruise_io||[]).push([[1045],{2190:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"openkruise-1.0","metadata":{"permalink":"/zh/blog/openkruise-1.0","editUrl":"https://github.com/openkruise/openkruise.io/tree/master/blog/blog/2021-12-13-release-1.0.md","source":"@site/i18n/zh/docusaurus-plugin-content-blog/2021-12-13-release-1.0.md","title":"OpenKruise v1.0\uff1a\u4e91\u539f\u751f\u5e94\u7528\u81ea\u52a8\u5316\u8fbe\u5230\u65b0\u7684\u9ad8\u5cf0","description":"\u4e91\u539f\u751f\u5e94\u7528\u81ea\u52a8\u5316\u7ba1\u7406\u5957\u4ef6\u3001CNCF Sandbox \u9879\u76ee -- OpenKruise\uff0c\u8fd1\u671f\u53d1\u5e03\u4e86 v1.0 \u5927\u7248\u672c\u3002","date":"2021-12-13T00:00:00.000Z","formattedDate":"2021\u5e7412\u670813\u65e5","tags":[{"label":"release","permalink":"/zh/blog/tags/release"}],"readingTime":10.86,"truncated":false,"authors":[{"name":"Siyu Wang","title":"Maintainer of OpenKruise","url":"https://github.com/FillZpp","imageURL":"https://github.com/FillZpp.png","key":"FillZpp"}],"nextItem":{"title":"OpenKruise 0.10.0\uff1a\u65b0\u589e\u5e94\u7528\u5f39\u6027\u62d3\u6251\u7ba1\u7406\u3001\u5e94\u7528\u9632\u62a4\u7b49\u80fd\u529b","permalink":"/zh/blog/openkruise-0.10.0"}},"content":"\u4e91\u539f\u751f\u5e94\u7528\u81ea\u52a8\u5316\u7ba1\u7406\u5957\u4ef6\u3001CNCF Sandbox \u9879\u76ee -- OpenKruise\uff0c\u8fd1\u671f\u53d1\u5e03\u4e86 v1.0 \u5927\u7248\u672c\u3002\\n\\n[OpenKruise](https://openkruise.io) \u662f\u9488\u5bf9 Kubernetes \u7684\u589e\u5f3a\u80fd\u529b\u5957\u4ef6\uff0c\u805a\u7126\u4e8e\u4e91\u539f\u751f\u5e94\u7528\u7684\u90e8\u7f72\u3001\u5347\u7ea7\u3001\u8fd0\u7ef4\u3001\u7a33\u5b9a\u6027\u9632\u62a4\u7b49\u9886\u57df\u3002\u6240\u6709\u7684\u529f\u80fd\u90fd\u901a\u8fc7 CRD \u7b49\u6807\u51c6\u65b9\u5f0f\u6269\u5c55\uff0c\u53ef\u4ee5\u9002\u7528\u4e8e 1.16 \u4ee5\u4e0a\u7248\u672c\u7684\u4efb\u610f Kubernetes \u96c6\u7fa4\u3002\u5355\u6761 helm \u547d\u4ee4\u5373\u53ef\u5b8c\u6210 Kruise \u7684\u4e00\u952e\u90e8\u7f72\uff0c\u65e0\u9700\u66f4\u591a\u914d\u7f6e\u3002\\n\\n![openkruise-features|center|450x400](/img/blog/2021-12-13-release-1.0/features-zh.png)\\n\\n\u603b\u5f97\u6765\u770b\uff0c\u76ee\u524d OpenKruise \u63d0\u4f9b\u7684\u80fd\u529b\u5206\u4e3a\u51e0\u4e2a\u9886\u57df\uff1a\\n\\n- **\u5e94\u7528\u5de5\u4f5c\u8d1f\u8f7d**\uff1a\u9762\u5411\u65e0\u72b6\u6001\u3001\u6709\u72b6\u6001\u3001daemon \u7b49\u591a\u79cd\u7c7b\u578b\u5e94\u7528\u7684\u9ad8\u7ea7\u90e8\u7f72\u53d1\u5e03\u7b56\u7565\uff0c\u4f8b\u5982\u539f\u5730\u5347\u7ea7\u3001\u7070\u5ea6\u6d41\u5f0f\u53d1\u5e03\u7b49\u3002\\n- **Sidecar \u5bb9\u5668\u7ba1\u7406**\uff1a\u652f\u6301\u72ec\u7acb\u5b9a\u4e49 sidecar \u5bb9\u5668\uff0c\u5b8c\u6210\u52a8\u6001\u6ce8\u5165\u3001\u72ec\u7acb\u539f\u5730\u5347\u7ea7\u3001\u70ed\u5347\u7ea7\u7b49\u529f\u80fd\u3002\\n- **\u589e\u5f3a\u8fd0\u7ef4\u80fd\u529b**\uff1a\u5305\u62ec\u5bb9\u5668\u539f\u5730\u91cd\u542f\u3001\u955c\u50cf\u9884\u62c9\u53d6\u3001\u5bb9\u5668\u542f\u52a8\u987a\u5e8f\u4fdd\u969c\u7b49\u3002\\n- **\u5e94\u7528\u5206\u533a\u7ba1\u7406**\uff1a\u7ba1\u7406\u5e94\u7528\u5728\u591a\u4e2a\u5206\u533a\uff08\u53ef\u7528\u533a\u3001\u4e0d\u540c\u673a\u578b\u7b49\uff09\u4e0a\u7684\u90e8\u7f72\u6bd4\u4f8b\u3001\u987a\u5e8f\u3001\u4f18\u5148\u7ea7\u7b49\u3002\\n- **\u5e94\u7528\u5b89\u5168\u9632\u62a4**\uff1a\u5e2e\u52a9\u5e94\u7528\u5728 Kubernetes \u4e4b\u4e0a\u83b7\u5f97\u66f4\u9ad8\u7684\u5b89\u5168\u6027\u4fdd\u969c\u4e0e\u53ef\u7528\u6027\u9632\u62a4\u3002\\n\\n## \u7248\u672c\u89e3\u6790\\n\\n\u5728 v1.0 \u5927\u7248\u672c\u4e2d\uff0cOpenKruise \u5e26\u6765\u4e86\u591a\u79cd\u65b0\u7684\u7279\u6027\uff0c\u540c\u65f6\u4e5f\u5bf9\u4e0d\u5c11\u5df2\u6709\u529f\u80fd\u505a\u4e86\u589e\u5f3a\u4e0e\u4f18\u5316\u3002\\n\\n\u9996\u5148\u8981\u8bf4\u7684\u662f\uff0c\u4ece v1.0 \u5f00\u59cb OpenKruise \u5c06 CRD/WehhookConfiguration \u7b49\u8d44\u6e90\u914d\u7f6e\u7684\u7248\u672c\u4ece `v1beta1` \u5347\u7ea7\u5230 `v1`\uff0c\u56e0\u6b64\u53ef\u4ee5**\u652f\u6301 Kubernetes v1.22 \u53ca\u4ee5\u4e0a\u7248\u672c\u7684\u96c6\u7fa4\uff0c\u4f46\u540c\u65f6\u4e5f\u8981\u6c42 Kubernetes \u7684\u7248\u672c\u4e0d\u80fd\u4f4e\u4e8e v1.16**\u3002\\n\\n\u4ee5\u4e0b\u5bf9 v1.0 \u7684\u90e8\u5206\u529f\u80fd\u505a\u7b80\u8981\u4ecb\u7ecd\uff0c\u8be6\u7ec6\u7684 ChangeLog \u5217\u8868\u8bf7\u67e5\u770b OpenKruise Github \u4e0a\u7684 release \u8bf4\u660e\u4ee5\u53ca\u5b98\u7f51\u6587\u6863\u3002\\n\\n### 1. \u652f\u6301\u73af\u5883\u53d8\u91cf\u539f\u5730\u5347\u7ea7\\n\\n*Author: [@FillZpp](https://github.com/FillZpp)*\\n\\nOpenKruise \u4ece\u65e9\u671f\u7248\u672c\u5f00\u59cb\u5c31\u652f\u6301\u4e86 \u201c\u539f\u5730\u5347\u7ea7\u201d \u529f\u80fd\uff0c\u4e3b\u8981\u5e94\u7528\u4e8e CloneSet \u4e0e Advanced StatefulSet \u4e24\u79cd\u5de5\u4f5c\u8d1f\u8f7d\u4e0a\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u539f\u5730\u5347\u7ea7\u4f7f\u5f97\u5e94\u7528\u5728\u5347\u7ea7\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u9700\u8981\u5220\u9664\u3001\u65b0\u5efa Pod \u5bf9\u8c61\uff0c\u800c\u662f\u901a\u8fc7\u5bf9 Pod \u4e2d\u5bb9\u5668\u914d\u7f6e\u7684\u4fee\u6539\u6765\u8fbe\u5230\u5347\u7ea7\u7684\u76ee\u7684\u3002\\n\\n![inplace-update-comparation|center|450x400](/img/docs/core-concepts/inplace-update-comparation.png)\\n\\n\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u539f\u5730\u5347\u7ea7\u8fc7\u7a0b\u4e2d\u53ea\u4fee\u6539\u4e86 Pod \u4e2d\u7684\u5b57\u6bb5\uff0c\u56e0\u6b64\uff1a\\n\\n1. \u53ef\u4ee5\u907f\u514d\u5982 *\u8c03\u5ea6*\u3001*\u5206\u914d IP*\u3001*\u5206\u914d\u3001\u6302\u8f7d\u76d8* \u7b49\u989d\u5916\u7684\u64cd\u4f5c\u548c\u4ee3\u4ef7\u3002\\n2. \u66f4\u5feb\u7684\u955c\u50cf\u62c9\u53d6\uff0c\u56e0\u4e3a\u5f00\u6e90\u590d\u7528\u5df2\u6709\u65e7\u955c\u50cf\u7684\u5927\u90e8\u5206 layer \u5c42\uff0c\u53ea\u9700\u8981\u62c9\u53d6\u65b0\u955c\u50cf\u53d8\u5316\u7684\u4e00\u4e9b layer\u3002\\n3. \u5f53\u4e00\u4e2a\u5bb9\u5668\u5728\u539f\u5730\u5347\u7ea7\u65f6\uff0cPod \u7684\u7f51\u7edc\u3001\u6302\u8f7d\u76d8\u3001\u4ee5\u53ca Pod \u4e2d\u7684\u5176\u4ed6\u5bb9\u5668\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\uff0c\u4ecd\u7136\u7ef4\u6301\u8fd0\u884c\u3002\\n\\n\u7136\u800c\uff0cOpenKruise \u8fc7\u53bb\u53ea\u80fd\u5bf9 Pod \u4e2d image \u5b57\u6bb5\u7684\u66f4\u65b0\u505a\u539f\u5730\u5347\u7ea7\uff0c\u5bf9\u4e8e\u5176\u4ed6\u5b57\u6bb5\u4ecd\u7136\u53ea\u80fd\u91c7\u7528\u4e0e Deployment \u76f8\u4f3c\u7684\u91cd\u5efa\u5347\u7ea7\u3002\u4e00\u76f4\u4ee5\u6765\uff0c\u6211\u4eec\u6536\u5230\u5f88\u591a\u7528\u6237\u53cd\u9988\uff0c\u5e0c\u671b\u652f\u6301\u5bf9 env \u7b49\u66f4\u591a\u5b57\u6bb5\u7684\u539f\u5730\u5347\u7ea7 -- \u7531\u4e8e\u53d7\u5230 kube-apiserver \u7684\u9650\u5236\uff0c\u8fd9\u662f\u5f88\u96be\u505a\u5230\u7684\u3002\\n\\n\u7ecf\u8fc7\u6211\u4eec\u7684\u4e0d\u61c8\u52aa\u529b\uff0cOpenKruise \u7ec8\u4e8e\u5728 v1.0 \u7248\u672c\u4e2d\uff0c\u652f\u6301\u4e86\u901a\u8fc7 Downward API \u7684\u65b9\u5f0f\u652f\u6301\u4e86 env \u73af\u5883\u53d8\u91cf\u7684\u539f\u5730\u5347\u7ea7\u3002\u4f8b\u5982\u5bf9\u4ee5\u4e0bCloneSet YAML\uff0c\u7528\u6237\u5c06\u914d\u7f6e\u5b9a\u4e49\u5728 annotation \u4e2d\u5e76\u5173\u8054\u5230\u5bf9\u5e94 env \u4e2d\u3002\u540e\u7eed\u5728\u4fee\u6539\u914d\u7f6e\u65f6\uff0c\u53ea\u9700\u8981\u66f4\u65b0 annotation value \u4e2d\u7684\u503c\uff0cKruise \u5c31\u4f1a\u5bf9 Pod \u4e2d\u6240\u6709 env \u91cc\u5f15\u7528\u4e86\u8fd9\u4e2a annotation \u7684\u5bb9\u5668\u89e6\u53d1\u539f\u5730\u91cd\u5efa\uff0c\u4ece\u800c\u751f\u6548\u8fd9\u4e2a\u65b0\u7684 value \u914d\u7f6e\u3002\\n\\n```yaml\\napiVersion: apps.kruise.io/v1alpha1\\nkind: CloneSet\\nmetadata:\\n  ...\\nspec:\\n  replicas: 1\\n  template:\\n    metadata:\\n      annotations:\\n        app-config: \\"... the real env value ...\\"\\n    spec:\\n      containers:\\n      - name: app\\n        env:\\n        - name: APP_CONFIG\\n          valueFrom:\\n            fieldRef:\\n              fieldPath: metadata.annotations[\'app-config\']\\n  updateStrategy:\\n    type: InPlaceIfPossible\\n```\\n\\n*\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u5728\u8fd9\u4e2a\u7248\u672c\u4e2d\u4e5f\u53bb\u9664\u4e86\u8fc7\u53bb\u5bf9\u955c\u50cf\u539f\u5730\u5347\u7ea7\u7684`imageID`\u9650\u5236\uff0c\u5373\u652f\u6301\u76f8\u540cimageID\u7684\u4e24\u4e2a\u955c\u50cf\u66ff\u6362\u5347\u7ea7\u3002*\\n\\n\u5177\u4f53\u4f7f\u7528\u65b9\u5f0f\u8bf7\u53c2\u8003[\u6587\u6863](/docs/core-concepts/inplace-update)\u3002\\n\\n### 2. \u914d\u7f6e\u8de8\u547d\u540d\u7a7a\u95f4\u5206\u53d1\\n\\n*Author: [@veophi](https://github.com/veophi)*\\n\\n\u5728\u5bf9 Secret\u3001ConfigMap \u7b49 namespace-scoped \u8d44\u6e90\u8fdb\u884c\u8de8 namespace \u5206\u53d1\u53ca\u540c\u6b65\u7684\u573a\u666f\u4e2d\uff0c\u539f\u751f kubernetes \u76ee\u524d\u53ea\u652f\u6301\u7528\u6237 one-by-one \u5730\u8fdb\u884c\u624b\u52a8\u5206\u53d1\u4e0e\u540c\u6b65\uff0c\u5341\u5206\u5730\u4e0d\u65b9\u4fbf\u3002\\n\\n\u5178\u578b\u7684\u6848\u4f8b\u6709\uff1a\\n- \u5f53\u7528\u6237\u9700\u8981\u4f7f\u7528 SidecarSet \u7684 imagePullSecrets \u80fd\u529b\u65f6\uff0c\u8981\u5148\u91cd\u590d\u5730\u5728\u76f8\u5173 namespaces \u4e2d\u521b\u5efa\u5bf9\u5e94\u7684 Secret\uff0c\u5e76\u4e14\u9700\u8981\u786e\u4fdd\u8fd9\u4e9b Secret \u914d\u7f6e\u7684\u6b63\u786e\u6027\u548c\u4e00\u81f4\u6027\u3002\\n- \u5f53\u7528\u6237\u60f3\u8981\u91c7\u7528 ConfigMap \u6765\u914d\u7f6e\u4e00\u4e9b**\u901a\u7528**\u7684\u73af\u5883\u53d8\u91cf\u65f6\uff0c\u5f80\u5f80\u9700\u8981\u5728\u591a\u4e2a namespaces \u505a ConfigMap \u7684\u4e0b\u53d1\uff0c\u5e76\u4e14\u540e\u7eed\u7684\u4fee\u6539\u5f80\u5f80\u4e5f\u8981\u6c42\u591a namespaces \u4e4b\u95f4\u4fdd\u6301\u540c\u6b65\u3002\\n\\n\u56e0\u6b64\uff0c\u9762\u5bf9\u8fd9\u4e9b\u9700\u8981\u8de8 namespaces \u8fdb\u884c\u8d44\u6e90\u5206\u53d1\u548c**\u591a\u6b21\u540c\u6b65**\u7684\u573a\u666f\uff0c\u6211\u4eec\u671f\u671b\u4e00\u79cd\u66f4\u4fbf\u6377\u7684\u5206\u53d1\u548c\u540c\u6b65\u5de5\u5177\u6765\u81ea\u52a8\u5316\u5730\u53bb\u505a\u8fd9\u4ef6\u4e8b\uff0c\u4e3a\u6b64\u6211\u4eec\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684CRD --- **ResourceDistribution**\u3002\\n\\nResourceDistribution \u76ee\u524d\u652f\u6301 **Secret** \u548c **ConfigMap** \u4e24\u7c7b\u8d44\u6e90\u7684\u5206\u53d1\u548c\u540c\u6b65\u3002\\n\\n```yaml\\napiVersion: apps.kruise.io/v1alpha1\\nkind: ResourceDistribution\\nmetadata:\\n  name: sample\\nspec:\\n  resource:\\n    apiVersion: v1\\n    kind: ConfigMap\\n    metadata:\\n      name: game-demo\\n    data:\\n      ...\\n  targets:\\n  \\tnamespaceLabelSelector:\\n      ...\\n    # or includedNamespaces, excludedNamespaces\\n```\\n\\n\u5982\u4e0a\u8ff0 YAML \u6240\u793a\uff0cResourceDistribution\u662f\u4e00\u7c7b **cluster-scoped** \u7684 CRD\uff0c\u5176\u4e3b\u8981\u7531 **`resource`** \u548c **`targets`** \u4e24\u4e2a\u5b57\u6bb5\u6784\u6210\uff0c\u5176\u4e2d **`resource`** \u5b57\u6bb5\u7528\u4e8e\u63cf\u8ff0\u7528\u6237\u6240\u8981\u5206\u53d1\u7684\u8d44\u6e90\uff0c**`targets`** \u5b57\u6bb5\u7528\u4e8e\u63cf\u8ff0\u7528\u6237\u6240\u8981\u5206\u53d1\u7684\u76ee\u6807\u547d\u540d\u7a7a\u95f4\u3002\\n\\n\u5177\u4f53\u4f7f\u7528\u65b9\u5f0f\u8bf7\u53c2\u8003[\u6587\u6863](/docs/user-manuals/resourcedistribution)\u3002\\n\\n### 3. \u5bb9\u5668\u542f\u52a8\u987a\u5e8f\u63a7\u5236\\n\\n*Author: [@Concurrensee](https://github.com/Concurrensee)*\\n\\n\u5bf9\u4e8e Kubernetes \u7684\u4e00\u4e2a Pod\uff0c\u5176\u4e2d\u7684\u591a\u4e2a\u5bb9\u5668\u53ef\u80fd\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\uff0c\u6bd4\u5982 \u5bb9\u5668B \u4e2d\u5e94\u7528\u8fdb\u7a0b\u7684\u8fd0\u884c\u4f9d\u8d56\u4e8e \u5bb9\u5668A \u4e2d\u7684\u5e94\u7528\u3002\u56e0\u6b64\uff0c\u591a\u4e2a\u5bb9\u5668\u4e4b\u95f4\u5b58\u5728\u987a\u5e8f\u5173\u7cfb\u7684\u9700\u6c42\uff1a\\n- \u5bb9\u5668A \u5148\u542f\u52a8\uff0c\u542f\u52a8\u6210\u529f\u540e\u624d\u53ef\u4ee5\u542f\u52a8 \u5bb9\u5668B\\n- \u5bb9\u5668B \u5148\u9000\u51fa\uff0c\u9000\u51fa\u5b8c\u6210\u540e\u624d\u53ef\u4ee5\u505c\u6b62 \u5bb9\u5668A\\n\\n\u901a\u5e38\u6765\u8bf4 Pod \u5bb9\u5668\u7684\u542f\u52a8\u548c\u9000\u51fa\u987a\u5e8f\u662f\u7531 Kubelet \u7ba1\u7406\u7684\u3002Kubernetes \u66fe\u7ecf\u6709\u4e00\u4e2a KEP \u8ba1\u5212\u5728 container \u4e2d\u589e\u52a0\u4e00\u4e2a type \u5b57\u6bb5\u6765\u6807\u8bc6\u4e0d\u540c\u7c7b\u578b\u5bb9\u5668\u7684\u542f\u505c\u4f18\u5148\u7ea7\u3002\u4f46\u662f\u7531\u4e8e sig-node \u8003\u8651\u5230\u5bf9\u73b0\u6709\u4ee3\u7801\u67b6\u6784\u7684\u6539\u52a8\u592a\u5927\uff0c\u76ee\u524d\u8fd9\u4e2a KEP \u5df2\u7ecf\u88ab\u62d2\u7edd\u4e86\u3002\\n\\n\u56e0\u6b64\uff0cOpenKruise \u5728 v1.0 \u4e2d\u63d0\u4f9b\u4e86\u540d\u4e3a **Container Launch Priority** \u7684\u529f\u80fd\uff0c\u7528\u4e8e\u63a7\u5236\u4e00\u4e2a Pod \u4e2d\u591a\u4e2a\u5bb9\u5668\u7684\u5f3a\u5236\u542f\u52a8\u987a\u5e8f\uff1a\\n\\n1. \u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a Pod \u5bf9\u8c61\uff0c\u53ea\u9700\u8981\u5728 annotations \u4e2d\u5b9a\u4e49 `apps.kruise.io/container-launch-priority: Ordered`\uff0c\u5219 Kruise \u4f1a\u6309\u7167 Pod \u4e2d `containers` \u5bb9\u5668\u5217\u8868\u7684\u987a\u5e8f\u6765\u4fdd\u8bc1\u5176\u4e2d\u5bb9\u5668\u7684\u4e32\u884c\u542f\u52a8\u3002\\n2. \u5982\u679c\u8981\u81ea\u5b9a\u4e49 `containers` \u4e2d\u591a\u4e2a\u5bb9\u5668\u7684\u542f\u52a8\u987a\u5e8f\uff0c\u5219\u5728\u5bb9\u5668 env \u4e2d\u6dfb\u52a0 `KRUISE_CONTAINER_PRIORITY` \u73af\u5883\u53d8\u91cf\uff0cvalue \u503c\u662f\u8303\u56f4\u5728 `[-2147483647, 2147483647]` \u7684\u6574\u6570\u3002\u4e00\u4e2a\u5bb9\u5668\u7684 priority \u503c\u8d8a\u5927\uff0c\u4f1a\u4fdd\u8bc1\u8d8a\u5148\u542f\u52a8\u3002\\n\\n\u5177\u4f53\u4f7f\u7528\u65b9\u5f0f\u8bf7\u53c2\u8003[\u6587\u6863](/docs/user-manuals/containerlaunchpriority)\u3002\\n\\n### 4. `kubectl-kruise` \u547d\u4ee4\u884c\u5de5\u5177\\n\\n*Author: [@hantmac](https://github.com/hantmac)*\\n\\n\u8fc7\u53bb OpenKruise \u662f\u901a\u8fc7 kruise-api\u3001client-java \u7b49\u4ed3\u5e93\u63d0\u4f9b\u4e86 Go\u3001Java \u7b49\u8bed\u8a00\u7684 Kruise API \u5b9a\u4e49\u4ee5\u53ca\u5ba2\u6237\u7aef\u5c01\u88c5\uff0c\u53ef\u4f9b\u7528\u6237\u5728\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5f15\u5165\u4f7f\u7528\u3002\u4f46\u4ecd\u7136\u6709\u4e0d\u5c11\u7528\u6237\u5728\u6d4b\u8bd5\u73af\u5883\u4e0b\u9700\u8981\u7075\u6d3b\u5730\u7528\u547d\u4ee4\u884c\u64cd\u4f5c workload \u8d44\u6e90\u3002\\n\\n\u7136\u800c\u539f\u751f `kubectl` \u5de5\u5177\u63d0\u4f9b\u7684 `rollout`\u3001`set image` \u7b49\u547d\u4ee4\u53ea\u80fd\u9002\u7528\u4e8e\u539f\u751f\u7684 workload \u7c7b\u578b\uff0c\u5982 Deployment\u3001StatefulSet\uff0c\u5e76\u4e0d\u80fd\u8bc6\u522b OpenKruise \u4e2d\u6269\u5c55\u7684 workload \u7c7b\u578b\u3002\\n\\n\u56e0\u6b64\uff0cOpenKruise \u6700\u65b0\u63d0\u4f9b\u4e86 `kubectl-kruise` \u547d\u4ee4\u884c\u5de5\u5177\uff0c\u5b83\u662f `kubectl` \u7684\u6807\u51c6\u63d2\u4ef6\uff0c\u63d0\u4f9b\u4e86\u8bb8\u591a\u9002\u7528\u4e8e OpenKruise workload \u7684\u529f\u80fd\u3002\\n\\n```bash\\n# rollout undo cloneset\\n$ kubectl kruise rollout undo cloneset/nginx\\n\\n#  rollout status advanced statefulset\\n$ kubectl kruise rollout status statefulsets.apps.kruise.io/sts-demo\\n\\n# set image of a cloneset\\n$ kubectl kruise set image cloneset/nginx busybox=busybox nginx=nginx:1.9.1\\n```\\n\\n\u5177\u4f53\u4f7f\u7528\u65b9\u5f0f\u8bf7\u53c2\u8003[\u6587\u6863](/docs/cli-tool/kubectl-plugin)\u3002\\n\\n### 5. \u5176\u4f59\u90e8\u5206\u529f\u80fd\u6539\u8fdb\u4e0e\u4f18\u5316\\n\\n**CloneSet:**\\n- \u901a\u8fc7 `scaleStrategy.maxUnavailable` \u7b56\u7565\u652f\u6301\u6d41\u5f0f\u6269\u5bb9\\n- Stable revision \u5224\u65ad\u903b\u8f91\u53d8\u5316\uff0c\u5f53\u6240\u6709 Pod \u7248\u672c\u4e0e updateRevision \u4e00\u81f4\u65f6\u5219\u6807\u8bb0\u4e3a currentRevision\\n\\n**WorkloadSpread:**\\n- \u652f\u6301\u63a5\u7ba1\u5b58\u91cf Pod \u5230\u5339\u914d\u7684 subset \u5206\u7ec4\u4e2d\\n- \u4f18\u5316 webhook \u5728 Pod \u6ce8\u5165\u65f6\u7684\u66f4\u65b0\u4e0e\u91cd\u8bd5\u903b\u8f91\\n\\n**Advanced DaemonSet:**\\n- \u652f\u6301\u5bf9 Daemon Pod \u505a\u539f\u5730\u5347\u7ea7\\n- \u5f15\u5165 progressive annotation \u6765\u9009\u62e9\u662f\u5426\u6309 partition \u9650\u5236 Pod \u521b\u5efa\\n\\n**SidecarSet:**\\n- \u89e3\u51b3 SidecarSet \u8fc7\u6ee4\u5c4f\u853d inactive Pod\\n- \u5728 `transferenv` \u4e2d\u65b0\u589e `SourceContainerNameFrom` \u548c `EnvNames` \u5b57\u6bb5\uff0c\u6765\u89e3\u51b3 container name \u4e0d\u4e00\u81f4\u4e0e\u5927\u91cf env \u60c5\u51b5\u4e0b\u7684\u5197\u4f59\u95ee\u9898\\n\\n**PodUnavailableBudget:**\\n- \u65b0\u589e \u201c\u8df3\u8fc7\u4fdd\u62a4\u201d \u6807\u8bc6\\n- PodUnavailableBudget controller \u5173\u6ce8 workload \u5de5\u4f5c\u8d1f\u8f7d\u7684 replicas \u53d8\u5316\\n\\n**NodeImage:**\\n- \u52a0\u5165 `--nodeimage-creation-delay` \u53c2\u6570\uff0c\u5e76\u9ed8\u8ba4\u7b49\u5f85\u65b0\u589e Node ready \u4e00\u6bb5\u65f6\u95f4\u540e\u540c\u6b65\u521b\u5efa NodeImage\\n\\n**UnitedDeployment:**\\n- \u89e3\u51b3 `NodeSelectorTerms` \u4e3a nil \u60c5\u51b5\u4e0b Pod `NodeSelectorTerms` \u957f\u5ea6\u4e3a 0 \u7684\u95ee\u9898\\n\\n**Other optimization:**\\n- kruise-daemon \u91c7\u7528 protobuf \u534f\u8bae\u64cd\u4f5c Pod \u8d44\u6e90\\n- \u66b4\u9732 cache resync \u4e3a\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u5e76\u5728 chart \u4e2d\u8bbe\u7f6e\u9ed8\u8ba4\u503c\u4e3a 0\\n- \u89e3\u51b3 certs \u66f4\u65b0\u65f6\u7684 http checker \u5237\u65b0\u95ee\u9898\\n- \u53bb\u9664\u5bf9 forked controller-tools \u7684\u4f9d\u8d56\uff0c\u6539\u4e3a\u4f7f\u7528\u539f\u751f controller-tools \u914d\u5408 markers \u6ce8\u89e3"},{"id":"openkruise-0.10.0","metadata":{"permalink":"/zh/blog/openkruise-0.10.0","editUrl":"https://github.com/openkruise/openkruise.io/tree/master/blog/blog/2021-09-06-release-0.10.0.md","source":"@site/i18n/zh/docusaurus-plugin-content-blog/2021-09-06-release-0.10.0.md","title":"OpenKruise 0.10.0\uff1a\u65b0\u589e\u5e94\u7528\u5f39\u6027\u62d3\u6251\u7ba1\u7406\u3001\u5e94\u7528\u9632\u62a4\u7b49\u80fd\u529b","description":"\u672c\u6587\u5c06\u5e26\u4f60\u4e00\u89c8 v0.10.0 \u7684\u65b0\u53d8\u5316\uff0c\u5176\u4e2d\u65b0\u589e\u7684 WorkloadSpread\u3001PodUnavailableBudget \u7b49\u5927\u9897\u7c92\u7279\u6027\u540e\u7eed\u8fd8\u5c06\u6709\u4e13\u6587\u8be6\u7ec6\u4ecb\u7ecd\u5176\u8bbe\u8ba1\u5b9e\u73b0\u539f\u7406\u3002","date":"2021-09-06T00:00:00.000Z","formattedDate":"2021\u5e749\u67086\u65e5","tags":[{"label":"release","permalink":"/zh/blog/tags/release"}],"readingTime":8.615,"truncated":false,"authors":[{"name":"Siyu Wang","title":"Maintainer of OpenKruise","url":"https://github.com/FillZpp","imageURL":"https://github.com/FillZpp.png","key":"FillZpp"}],"prevItem":{"title":"OpenKruise v1.0\uff1a\u4e91\u539f\u751f\u5e94\u7528\u81ea\u52a8\u5316\u8fbe\u5230\u65b0\u7684\u9ad8\u5cf0","permalink":"/zh/blog/openkruise-1.0"},"nextItem":{"title":"OpenKruise 0.9.0\uff1a\u65b0\u589ePod\u5bb9\u5668\u91cd\u542f\u3001\u8d44\u6e90\u5220\u9664\u9632\u62a4\u7b49\u529f\u80fd","permalink":"/zh/blog/openkruise-0.9.0"}},"content":"\u672c\u6587\u5c06\u5e26\u4f60\u4e00\u89c8 v0.10.0 \u7684\u65b0\u53d8\u5316\uff0c\u5176\u4e2d\u65b0\u589e\u7684 WorkloadSpread\u3001PodUnavailableBudget \u7b49\u5927\u9897\u7c92\u7279\u6027\u540e\u7eed\u8fd8\u5c06\u6709\u4e13\u6587\u8be6\u7ec6\u4ecb\u7ecd\u5176\u8bbe\u8ba1\u5b9e\u73b0\u539f\u7406\u3002\\n\\n## WorkloadSpread\uff1a\u65c1\u8def\u7684\u5e94\u7528\u5f39\u6027\u62d3\u6251\u7ba1\u7406\u80fd\u529b\\n\\n\u5728\u5e94\u7528\u90e8\u7f72\u8fd0\u7ef4\u7684\u573a\u666f\u4e0b\uff0c\u6709\u7740\u591a\u79cd\u591a\u6837\u7684\u62d3\u6251\u6253\u6563\u4ee5\u53ca\u5f39\u6027\u7684\u8bc9\u6c42\u3002\u5176\u4e2d\u6700\u5e38\u89c1\u3001\u6700\u57fa\u672c\u7684\uff0c\u5c31\u662f\u6309\u67d0\u79cd\u6216\u51e0\u79cd\u62d3\u6251\u6c34\u5e73\u6253\u6563\uff0c\u6bd4\u5982\uff1a\\n\\n- \u5e94\u7528\u90e8\u7f72\u9700\u8981\u6309 node \u7ef4\u5ea6\u6253\u6563\uff0c\u907f\u514d\u5806\u53e0\uff08\u63d0\u9ad8\u5bb9\u707e\u80fd\u529b\uff09\\n- \u5e94\u7528\u90e8\u7f72\u9700\u8981\u6309 AZ\uff08available zone\uff09\u7ef4\u5ea6\u6253\u6563\uff08\u63d0\u9ad8\u5bb9\u707e\u80fd\u529b\uff09\\n\\n\u8fd9\u4e9b\u57fa\u672c\u7684\u8bc9\u6c42\uff0c\u901a\u8fc7 Kubernetes \u539f\u751f\u63d0\u4f9b\u7684 pod affinity\u3001[topology spread constraints](https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/) \u7b49\u80fd\u529b\u76ee\u524d\u90fd\u80fd\u591f\u6ee1\u8db3\u4e86\u3002\u4f46\u5728\u5b9e\u9645\u7684\u751f\u4ea7\u573a\u666f\u4e0b\uff0c\u8fd8\u6709\u7740\u592a\u591a\u66f4\u52a0\u590d\u6742\u7684\u5206\u533a\u4e0e\u5f39\u6027\u9700\u6c42\uff0c\u4ee5\u4e0b\u4e3e\u4e00\u4e9b\u5b9e\u9645\u7684\u4f8b\u5b50\uff1a\\n\\n- \u6309 zone \u6253\u6563\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u5728\u4e0d\u540c zone \u4e2d\u90e8\u7f72\u7684\u6bd4\u4f8b\u6570\uff0c\u6bd4\u5982\u67d0\u4e2a\u5e94\u7528\u5728 zone a\u3001b\u3001c \u4e2d\u90e8\u7f72\u7684 Pod \u6570\u91cf\u6bd4\u4f8b\u4e3a 1 : 1 : 2 \u7b49\uff08\u7531\u4e8e\u4e00\u4e9b\u73b0\u5b9e\u7684\u539f\u56e0\u6bd4\u5982\u8be5\u5e94\u7528\u5728\u591a\u4e2a zone \u4e2d\u7684\u6d41\u91cf\u4e0d\u5747\u8861\u7b49\uff09\\n- \u5b58\u5728\u591a\u4e2a zone \u6216\u4e0d\u540c\u673a\u578b\u7684\u62d3\u6251\uff0c\u5e94\u7528\u6269\u5bb9\u65f6\uff0c\u4f18\u5148\u90e8\u7f72\u5230\u67d0\u4e2a zone \u6216\u673a\u578b\u4e0a\uff0c\u5f53\u8d44\u6e90\u4e0d\u8db3\u65f6\u518d\u90e8\u7f72\u5230\u53e6\u4e00\u4e2a zone \u6216\u673a\u578b\u4e0a\uff08\u5f80\u540e\u4ee5\u6b64\u7c7b\u63a8\uff09\uff1b\u5e94\u7528\u7f29\u5bb9\u65f6\uff0c\u8981\u6309\u53cd\u5411\u987a\u5e8f\uff0c\u4f18\u5148\u7f29\u5bb9\u540e\u9762 zone \u6216\u673a\u578b\u4e0a\u7684 Pod\uff08\u5f80\u524d\u4ee5\u6b64\u7c7b\u63a8\uff09\\n- \u5b58\u5728\u591a\u4e2a\u57fa\u7840\u7684\u8282\u70b9\u6c60\u548c\u5f39\u6027\u7684\u8282\u70b9\u6c60\uff0c\u5e94\u7528\u90e8\u7f72\u65f6\u9700\u8981\u56fa\u5b9a\u6570\u91cf\u6216\u6bd4\u4f8b\u7684 Pod \u90e8\u7f72\u5728\u57fa\u7840\u8282\u70b9\u6c60\uff0c\u5176\u4f59\u7684\u90fd\u6269\u5230\u5f39\u6027\u8282\u70b9\u6c60\\n\\n\u5bf9\u4e8e\u8fd9\u4e9b\u4f8b\u5b50\uff0c\u8fc7\u53bb\u4e00\u822c\u53ea\u80fd\u5c06\u4e00\u4e2a\u5e94\u7528\u62c6\u5206\u4e3a\u591a\u4e2a Workload\uff08\u6bd4\u5982 Deployment\uff09\u6765\u90e8\u7f72\uff0c\u624d\u80fd\u89e3\u51b3\u5e94\u7528\u5728\u4e0d\u540c\u62d3\u6251\u4e0b\u91c7\u7528\u4e0d\u540c\u6bd4\u4f8b\u6570\u91cf\u3001\u6269\u7f29\u5bb9\u4f18\u5148\u7ea7\u3001\u8d44\u6e90\u611f\u77e5\u3001\u5f39\u6027\u9009\u62e9\u7b49\u573a\u666f\u7684\u57fa\u672c\u95ee\u9898\uff0c\u4f46\u8fd8\u662f\u9700\u8981 PaaS \u5c42\u6df1\u5ea6\u5b9a\u5236\u5316\uff0c\u6765\u652f\u6301\u5bf9\u4e00\u4e2a\u5e94\u7528\u591a\u4e2a Workload \u7684\u7cbe\u7ec6\u5316\u7ba1\u7406\u3002\\n\\n\u9488\u5bf9\u8fd9\u4e9b\u95ee\u9898\uff0c\u5728 Kruise v0.10.0 \u7248\u672c\u4e2d\u65b0\u589e\u4e86 WorkloadSpread \u8d44\u6e90\uff0c\u76ee\u524d\u5b83\u652f\u6301\u914d\u5408 Deployment\u3001ReplicaSet\u3001CloneSet \u8fd9\u4e9b Workload \u7c7b\u578b\uff0c\u6765\u7ba1\u7406\u5b83\u4eec\u4e0b\u5c5e Pod \u7684\u5206\u533a\u4e0e\u5f39\u6027\u62d3\u6251\u3002\\n\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5316\u7684\u4f8b\u5b50\uff1a\\n\\n```yaml\\napiVersion: apps.kruise.io/v1alpha1\\nkind: WorkloadSpread\\nmetadata:\\n  name: workloadspread-demo\\nspec:\\n  targetRef:\\n    apiVersion: apps/v1 | apps.kruise.io/v1alpha1\\n    kind: Deployment | CloneSet\\n    name: workload-xxx\\n  subsets:\\n  - name: subset-a\\n    requiredNodeSelectorTerm:\\n      matchExpressions:\\n      - key: topology.kubernetes.io/zone\\n        operator: In\\n        values:\\n        - zone-a\\n    maxReplicas: 10 | 30%\\n  - name: subset-b\\n    requiredNodeSelectorTerm:\\n      matchExpressions:\\n      - key: topology.kubernetes.io/zone\\n        operator: In\\n        values:\\n        - zone-b\\n```\\n\\n\u521b\u5efa\u8fd9\u4e2a WorkloadSpread \u53ef\u4ee5\u901a\u8fc7 targetRef \u5173\u8054\u5230\u4e00\u4e2a Workload \u5bf9\u8c61\u4e0a\uff0c\u7136\u540e\u8fd9\u4e2a Workload \u5728\u6269\u5bb9 pod \u7684\u8fc7\u7a0b\u4e2d\uff0cPod \u4f1a\u88ab Kruise \u6309\u4e0a\u8ff0\u7b56\u7565\u6ce8\u5165\u5bf9\u5e94\u7684\u62d3\u6251\u89c4\u5219\u3002\u8fd9\u662f\u4e00\u79cd\u65c1\u8def\u7684\u6ce8\u5165\u548c\u7ba1\u7406\u65b9\u5f0f\uff0c\u672c\u8eab\u4e0d\u4f1a\u5e72\u6d89 Workload \u5bf9 Pod \u7684\u6269\u7f29\u5bb9\u3001\u53d1\u5e03\u7ba1\u7406\u3002\\n\\n\u6ce8\u610f\uff1aWorkloadSpread \u5bf9 Pod \u7684\u7f29\u5bb9\u7684\u4f18\u5148\u7ea7\u63a7\u5236\u662f\u901a\u8fc7 [Pod Deletion Cost](https://kubernetes.io/docs/reference/labels-annotations-taints/#pod-deletion-cost) \u6765\u5b9e\u73b0\u7684\uff1a\\n\\n- \u5982\u679c Workload \u7c7b\u578b\u662f CloneSet\uff0c\u5219\u5df2\u7ecf\u652f\u6301\u4e86\u8fd9\u4e2a feature\uff0c\u53ef\u4ee5\u5b9e\u73b0\u7f29\u5bb9\u4f18\u5148\u7ea7\\n- \u5982\u679c Workload \u7c7b\u578b\u662f Deployment/ReplicaSet\uff0c\u5219\u8981\u6c42 Kubernetes version >= 1.21\uff0c\u4e14\u5728 1.21 \u4e2d\u8981\u5728 kube-controller-manager \u4e0a\u5f00\u542f `PodDeletionCost` \u8fd9\u4e2a feature-gate\\n\\n\u4f7f\u7528 WorkloadSpread \u529f\u80fd\uff0c\u9700\u8981\u5728 \u5b89\u88c5/\u5347\u7ea7 Kruise v0.10.0 \u7684\u65f6\u5019\u6253\u5f00 WorkloadSpread \u8fd9\u4e2a feature-gate\u3002\\n\\n## PodUnavailableBudget\uff1a\u5e94\u7528\u53ef\u7528\u6027\u9632\u62a4\\n\\n\u5728\u8bf8\u591a [Voluntary Disruption](https://kubernetes.io/docs/concepts/workloads/pods/disruptions/) \u573a\u666f\u4e2d Kubernetes \u539f\u751f\u63d0\u4f9b\u7684 [Pod Disruption Budget\uff08PDB\uff09](https://kubernetes.io/docs/tasks/run-application/configure-pdb/) \u901a\u8fc7\u9650\u5236\u540c\u65f6\u4e2d\u65ad\u7684 Pod \u6570\u91cf\uff0c\u6765\u4fdd\u8bc1\u5e94\u7528\u7684\u9ad8\u53ef\u7528\u6027\u3002\\n\\n\u4f46\u8fd8\u6709\u5f88\u591a\u573a\u666f\u4e2d\uff0c\u5373\u4fbf\u6709 PDB \u9632\u62a4\u4f9d\u7136\u5c06\u4f1a\u5bfc\u81f4\u4e1a\u52a1\u4e2d\u65ad\u3001\u670d\u52a1\u964d\u7ea7\uff0c\u6bd4\u5982\uff1a\\n\\n- \u5e94\u7528 owner \u901a\u8fc7 Deployment \u6b63\u5728\u8fdb\u884c\u7248\u672c\u5347\u7ea7\uff0c\u4e0e\u6b64\u540c\u65f6\u96c6\u7fa4\u7ba1\u7406\u5458\u7531\u4e8e\u673a\u5668\u8d44\u6e90\u5229\u7528\u7387\u8fc7\u4f4e\u6b63\u5728\u8fdb\u884c node \u7f29\u5bb9\\n- \u4e2d\u95f4\u4ef6\u56e2\u961f\u5229\u7528 SidecarSet \u6b63\u5728\u539f\u5730\u5347\u7ea7\u96c6\u7fa4\u4e2d\u7684sidecar\u7248\u672c\uff08\u4f8b\u5982\uff1aServiceMesh envoy\uff09\uff0c\u540c\u65f6HPA\u6b63\u5728\u5bf9\u540c\u4e00\u6279\u5e94\u7528\u8fdb\u884c\u7f29\u5bb9\\n- \u5e94\u7528 owner \u548c\u4e2d\u95f4\u4ef6\u56e2\u961f\u5229\u7528 CloneSet\u3001SidecarSet \u539f\u5730\u5347\u7ea7\u7684\u80fd\u529b\uff0c\u6b63\u5728\u5bf9\u540c\u4e00\u6279 Pod \u8fdb\u884c\u5347\u7ea7\\n\\n\u8fd9\u5176\u5b9e\u5f88\u597d\u7406\u89e3 -- PDB \u53ea\u80fd\u9632\u63a7\u901a\u8fc7 Eviction API \u6765\u89e6\u53d1\u7684 Pod \u9a71\u9010\uff08\u4f8b\u5982 kubectl drain\u9a71\u9010node\u4e0a\u9762\u7684\u6240\u6709Pod\uff09\uff0c\u4f46\u662f\u5bf9\u4e8e Pod \u5220\u9664\u3001\u539f\u5730\u5347\u7ea7 \u7b49\u5f88\u591a\u64cd\u4f5c\u662f\u65e0\u6cd5\u9632\u62a4\u7684\u3002\\n\\n\u5728 Kruise v0.10.0 \u7248\u672c\u4e2d\u65b0\u589e\u7684 PodUnavailableBudget\uff08PUB\uff09\u529f\u80fd\uff0c\u5219\u662f\u5bf9\u539f\u751f PDB \u7684\u5f3a\u5316\u6269\u5c55\u3002\u5b83\u5305\u542b\u4e86 PDB \u81ea\u8eab\u7684\u80fd\u529b\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u5bf9\u66f4\u591a Voluntary Disruption \u64cd\u4f5c\u7684\u9632\u62a4\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e Pod \u5220\u9664\u3001\u539f\u5730\u5347\u7ea7 \u7b49\u3002\\n\\n```yaml\\napiVersion: apps.kruise.io/v1alpha1\\nkind: PodUnavailableBudget\\nmetadata:\\n  name: web-server-pub\\n  namespace: web\\nspec:\\n  targetRef:\\n    apiVersion: apps/v1 | apps.kruise.io/v1alpha1\\n    kind: Deployment | CloneSet | StatefulSet | ...\\n    name: web-server\\n  # selector \u4e0e targetRef \u4e8c\u9009\u4e00\u914d\u7f6e\\n# selector:\\n#   matchLabels:\\n#     app: web-server\\n  # \u4fdd\u8bc1\u7684\u6700\u5927\u4e0d\u53ef\u7528\u6570\u91cf\\n  maxUnavailable: 60%\\n  # \u4fdd\u8bc1\u7684\u6700\u5c0f\u53ef\u7528\u6570\u91cf\\n# minAvailable: 40%\\n```\\n\\n\u4f7f\u7528 PodUnavailableBudget \u529f\u80fd\uff0c\u9700\u8981\u5728 \u5b89\u88c5/\u5347\u7ea7 Kruise v0.10.0 \u7684\u65f6\u5019\u6253\u5f00feature-gate\uff08\u4e24\u4e2a\u53ef\u4ee5\u9009\u62e9\u6253\u5f00\u4e00\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u90fd\u6253\u5f00\uff09\uff1a\\n\\n- PodUnavailableBudgetDeleteGate\uff1a\u62e6\u622a\u9632\u62a4 Pod \u5220\u9664\u3001\u9a71\u9010 \u7b49\u64cd\u4f5c\\n- PodUnavailableBudgetUpdateGate\uff1a\u62e6\u622a\u9632\u62a4 Pod \u539f\u5730\u5347\u7ea7 \u7b49\u66f4\u65b0\u64cd\u4f5c\\n\\n## CloneSet \u652f\u6301\u6309\u62d3\u6251\u89c4\u5219\u7f29\u5bb9\\n\\n\u5728 CloneSet \u7f29\u5bb9\uff08\u8c03\u5c0f replicas \u6570\u91cf\uff09\u7684\u65f6\u5019\uff0c\u9009\u62e9\u54ea\u4e9b Pod \u5220\u9664\u662f\u6709\u4e00\u5957\u56fa\u5b9a\u7b97\u6cd5\u6392\u5e8f\u7684\uff1a\\n\\n1. \u672a\u8c03\u5ea6 < \u5df2\u8c03\u5ea6\\n2. PodPending < PodUnknown < PodRunning\\n3. Not ready < ready\\n4. **\u8f83\u5c0f pod-deletion cost < \u8f83\u5927 pod-deletion cost**\\n5. **\u8f83\u5927\u6253\u6563\u6743\u91cd < \u8f83\u5c0f**\\n6. \u5904\u4e8e Ready \u65f6\u95f4\u8f83\u77ed < \u8f83\u957f\\n7. \u5bb9\u5668\u91cd\u542f\u6b21\u6570\u8f83\u591a < \u8f83\u5c11\\n8. \u521b\u5efa\u65f6\u95f4\u8f83\u77ed < \u8f83\u957f\\n\\n\u5176\u4e2d\uff0c\u201c4\u201d \u662f\u5728 Kruise v0.9.0 \u4e2d\u5f00\u59cb\u63d0\u4f9b\u7684\u7279\u6027\uff0c\u7528\u4e8e\u652f\u6301\u7528\u6237\u6307\u5b9a\u5220\u9664\u987a\u5e8f\uff08WorkloadSpread \u5c31\u662f\u5229\u7528\u8fd9\u4e2a\u529f\u80fd\u5b9e\u73b0\u7f29\u5bb9\u4f18\u5148\u7ea7\uff09\uff1b**\u800c \u201c5\u201d \u5219\u662f\u5f53\u524d v0.10.0 \u63d0\u4f9b\u7684\u7279\u6027\uff0c\u5373\u5728\u7f29\u5bb9\u7684\u65f6\u5019\u4f1a\u53c2\u8003\u5e94\u7528\u7684\u62d3\u6251\u6253\u6563\u6765\u6392\u5e8f**\u3002\\n\\n- \u5982\u679c\u5e94\u7528\u914d\u7f6e\u4e86 [topology spread constraints](https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/)\uff0c\u5219 CloneSet \u7f29\u5bb9\u65f6\u4f1a\u6309\u7167\u5176\u4e2d\u7684 topology \u7ef4\u5ea6\u6253\u6563\u6765\u9009\u62e9 Pod \u5220\u9664\uff08\u6bd4\u5982\u5c3d\u91cf\u6253\u5e73\u591a\u4e2a zone \u4e0a\u90e8\u7f72 Pod \u7684\u6570\u91cf\uff09\\n- \u5982\u679c\u5e94\u7528\u6ca1\u6709\u914d\u7f6e [topology spread constraints](https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/)\uff0c\u5219\u9ed8\u8ba4\u60c5\u51b5\u4e0b CloneSet \u7f29\u5bb9\u65f6\u4f1a\u6309\u7167 node \u8282\u70b9\u7ef4\u5ea6\u6253\u6563\u6765\u9009\u62e9 Pod \u5220\u9664\uff08\u5c3d\u91cf\u51cf\u5c11\u540c node \u4e0a\u7684\u5806\u53e0\u6570\u91cf\uff09\\n\\n## Advanced StatefulSet \u652f\u6301\u6d41\u5f0f\u6269\u5bb9\\n\\n\u4e3a\u4e86\u907f\u514d\u5728\u4e00\u4e2a\u65b0 Advanced StatefulSet \u521b\u5efa\u540e\u6709\u5927\u91cf\u5931\u8d25\u7684 pod \u88ab\u521b\u5efa\u51fa\u6765\uff0c\u4ece Kruise v0.10.0 \u7248\u672c\u5f00\u59cb\u5f15\u5165\u4e86\u5728 scale strategy \u4e2d\u7684 maxUnavailable \u7b56\u7565\uff1a\\n\\n```yaml\\napiVersion: apps.kruise.io/v1beta1\\nkind: StatefulSet\\nspec:\\n  # ...\\n  replicas: 100\\n  scaleStrategy:\\n    maxUnavailable: 10% # percentage or absolute number\\n```\\n\\n\u5f53\u8fd9\u4e2a\u5b57\u6bb5\u88ab\u8bbe\u7f6e\u4e4b\u540e\uff0cAdvanced StatefulSet \u4f1a\u4fdd\u8bc1\u521b\u5efa pod \u4e4b\u540e\u4e0d\u53ef\u7528 pod \u6570\u91cf\u4e0d\u8d85\u8fc7\u8fd9\u4e2a\u9650\u5236\u503c\u3002\\n\u6bd4\u5982\u8bf4\uff0c\u4e0a\u9762\u8fd9\u4e2a StatefulSet \u4e00\u5f00\u59cb\u53ea\u4f1a\u4e00\u6b21\u6027\u521b\u5efa 10 \u4e2a pod\u3002\u5728\u6b64\u4e4b\u540e\uff0c\u6bcf\u5f53\u4e00\u4e2a pod \u53d8\u4e3a running\u3001ready \u72b6\u6001\u540e\uff0c\u624d\u4f1a\u518d\u521b\u5efa\u4e00\u4e2a\u65b0 pod \u51fa\u6765\u3002\\n\\n\u6ce8\u610f\uff1a\u8fd9\u4e2a\u529f\u80fd\u53ea\u5141\u8bb8\u5728 podManagementPolicy \u662f `Parallel` \u7684 StatefulSet \u4e2d\u4f7f\u7528\u3002\\n\\n## More\\n\\n\u66f4\u591a\u7248\u672c\u53d8\u5316\uff0c\u8bf7\u53c2\u8003 [release page](https://github.com/openkruise/kruise/releases) \u6216 [ChangeLog](https://github.com/openkruise/kruise/blob/master/CHANGELOG.md)"},{"id":"openkruise-0.9.0","metadata":{"permalink":"/zh/blog/openkruise-0.9.0","editUrl":"https://github.com/openkruise/openkruise.io/tree/master/blog/blog/2021-05-20-release-0.9.0.md","source":"@site/i18n/zh/docusaurus-plugin-content-blog/2021-05-20-release-0.9.0.md","title":"OpenKruise 0.9.0\uff1a\u65b0\u589ePod\u5bb9\u5668\u91cd\u542f\u3001\u8d44\u6e90\u5220\u9664\u9632\u62a4\u7b49\u529f\u80fd","description":"OpenKruise \u5728 2021.5.20 \u53d1\u5e03\u4e86\u6700\u65b0\u7684 v0.9.0 \u7248\u672c\uff0c\u65b0\u589e\u4e86 Pod \u5bb9\u5668\u91cd\u542f\u3001\u8d44\u6e90\u7ea7\u8054\u5220\u9664\u9632\u62a4\u7b49\u91cd\u78c5\u529f\u80fd\uff0c\u672c\u6587\u4ee5\u4e0b\u5bf9\u65b0\u7248\u672c\u505a\u6574\u4f53\u7684\u6982\u89c8\u4ecb\u7ecd\u3002","date":"2021-05-20T00:00:00.000Z","formattedDate":"2021\u5e745\u670820\u65e5","tags":[{"label":"release","permalink":"/zh/blog/tags/release"}],"readingTime":17.27,"truncated":false,"authors":[{"name":"Siyu Wang","title":"Maintainer of OpenKruise","url":"https://github.com/FillZpp","imageURL":"https://github.com/FillZpp.png","key":"FillZpp"}],"prevItem":{"title":"OpenKruise 0.10.0\uff1a\u65b0\u589e\u5e94\u7528\u5f39\u6027\u62d3\u6251\u7ba1\u7406\u3001\u5e94\u7528\u9632\u62a4\u7b49\u80fd\u529b","permalink":"/zh/blog/openkruise-0.10.0"},"nextItem":{"title":"UnitedDeploymemt - Supporting Multi-domain Workload Management","permalink":"/zh/blog/uniteddeployment"}},"content":"OpenKruise \u5728 2021.5.20 \u53d1\u5e03\u4e86\u6700\u65b0\u7684 v0.9.0 \u7248\u672c\uff0c\u65b0\u589e\u4e86 Pod \u5bb9\u5668\u91cd\u542f\u3001\u8d44\u6e90\u7ea7\u8054\u5220\u9664\u9632\u62a4\u7b49\u91cd\u78c5\u529f\u80fd\uff0c\u672c\u6587\u4ee5\u4e0b\u5bf9\u65b0\u7248\u672c\u505a\u6574\u4f53\u7684\u6982\u89c8\u4ecb\u7ecd\u3002\\n\\n## Pod \u5bb9\u5668\u91cd\u542f/\u91cd\u5efa\\n\\n\u201c\u91cd\u542f\u201d \u662f\u4e00\u4e2a\u5f88\u6734\u7d20\u7684\u9700\u6c42\uff0c\u5373\u4f7f\u65e5\u5e38\u8fd0\u7ef4\u7684\u8bc9\u6c42\uff0c\u4e5f\u662f\u6280\u672f\u9886\u57df\u8f83\u4e3a\u5e38\u89c1\u7684 \u201c\u6062\u590d\u624b\u6bb5\u201d\u3002\u800c\u5728\u539f\u751f\u7684 Kubernetes \u4e2d\uff0c\u5e76\u6ca1\u6709\u63d0\u4f9b\u4efb\u4f55\u5bf9\u5bb9\u5668\u7c92\u5ea6\u7684\u64cd\u4f5c\u80fd\u529b\uff0cPod \u4f5c\u4e3a\u6700\u5c0f\u64cd\u4f5c\u5355\u5143\u4e5f\u53ea\u6709\u521b\u5efa\u3001\u5220\u9664\u4e24\u79cd\u64cd\u4f5c\u65b9\u5f0f\u3002\\n\\n\u6709\u7684\u540c\u5b66\u53ef\u80fd\u4f1a\u95ee\uff0c\u5728\u4e91\u539f\u751f\u65f6\u4ee3\uff0c\u4e3a\u4ec0\u4e48\u7528\u6237\u8fd8\u8981\u5173\u6ce8\u5bb9\u5668\u91cd\u542f\u8fd9\u79cd\u8fd0\u7ef4\u64cd\u4f5c\u5462\uff1f\u5728\u7406\u60f3\u7684 serverless \u6a21\u5f0f\u4e0b\uff0c\u4e1a\u52a1\u53ea\u9700\u8981\u5173\u5fc3\u670d\u52a1\u81ea\u8eab\u5c31\u597d\u5427\uff1f\\n\\n\u8fd9\u6765\u81ea\u4e8e\u4e91\u539f\u751f\u67b6\u6784\u548c\u8fc7\u53bb\u4f20\u7edf\u57fa\u7840\u57fa\u7840\u8bbe\u65bd\u7684\u5dee\u5f02\u6027\u3002\u5728\u4f20\u7edf\u7684\u7269\u7406\u673a\u3001\u865a\u62df\u673a\u65f6\u4ee3\uff0c\u4e00\u53f0\u673a\u5668\u4e0a\u5f80\u5f80\u4f1a\u90e8\u7f72\u548c\u8fd0\u884c\u591a\u4e2a\u5e94\u7528\u7684\u5b9e\u4f8b\uff0c\u5e76\u4e14\u673a\u5668\u548c\u5e94\u7528\u7684\u751f\u547d\u5468\u671f\u662f\u4e0d\u540c\u7684\uff1b\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5e94\u7528\u5b9e\u4f8b\u7684\u91cd\u542f\u53ef\u80fd\u4ec5\u4ec5\u662f\u4e00\u6761 systemctl \u6216 supervisor \u4e4b\u7c7b\u7684\u6307\u4ee4\uff0c\u800c\u65e0\u9700\u5c06\u6574\u4e2a\u673a\u5668\u91cd\u542f\u3002\u7136\u800c\uff0c\u5728\u5bb9\u5668\u4e0e\u4e91\u539f\u751f\u6a21\u5f0f\u4e0b\uff0c\u5e94\u7528\u7684\u751f\u547d\u5468\u671f\u662f\u548c Pod \u5bb9\u5668\u7ed1\u5b9a\u7684\uff1b\u5373\u5e38\u89c4\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u5bb9\u5668\u53ea\u8fd0\u884c\u4e00\u4e2a\u5e94\u7528\u8fdb\u7a0b\uff0c\u4e00\u4e2a Pod \u4e5f\u53ea\u63d0\u4f9b\u4e00\u4e2a\u5e94\u7528\u5b9e\u4f8b\u7684\u670d\u52a1\u3002\\n\\n\u57fa\u4e8e\u4e0a\u8ff0\u7684\u9650\u5236\uff0c\u76ee\u524d\u539f\u751f Kubernetes \u4e4b\u4e0b\u662f\u6ca1\u6709 API \u6765\u4e3a\u4e0a\u5c42\u4e1a\u52a1\u63d0\u4f9b\u5bb9\u5668\uff08\u5e94\u7528\uff09\u91cd\u542f\u80fd\u529b\u7684\u3002\u800c Kruise v0.9.0 \u7248\u672c\u63d0\u4f9b\u4e86\u4e00\u79cd\u5355 Pod \u7ef4\u5ea6\u7684\u5bb9\u5668\u91cd\u542f\u80fd\u529b\uff0c\u517c\u5bb9 1.16 \u53ca\u4ee5\u4e0a\u7248\u672c\u7684\u6807\u51c6 Kubernetes \u96c6\u7fa4\u3002\u5728\u5b89\u88c5\u6216\u5347\u7ea7 Kruise \u4e4b\u540e\uff0c\u53ea\u9700\u8981\u521b\u5efa ContainerRecreateRequest\uff08\u7b80\u79f0 CRR\uff09 \u5bf9\u8c61\u6765\u6307\u5b9a\u91cd\u542f\uff0c\u6700\u7b80\u5355\u7684 YAML \u5982\u4e0b\uff1a\\n\\n```yaml\\napiVersion: apps.kruise.io/v1alpha1\\nkind: ContainerRecreateRequest\\nmetadata:\\n  namespace: pod-namespace\\n  name: xxx\\nspec:\\n  podName: pod-name\\n  containers:\\n  - name: app\\n  - name: sidecar\\n```\\n\\n\u5176\u4e2d\uff0cnamespace \u9700\u8981\u4e0e\u8981\u64cd\u4f5c\u7684 Pod \u5728\u540c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\uff0cname \u53ef\u81ea\u9009\u3002spec \u4e2d podName \u662f Pod \u540d\u5b57\uff0ccontainers \u5217\u8868\u5219\u53ef\u4ee5\u6307\u5b9a Pod \u4e2d\u4e00\u4e2a\u6216\u591a\u4e2a\u5bb9\u5668\u540d\u6765\u6267\u884c\u91cd\u542f\u3002\\n\\n\u9664\u4e86\u4e0a\u8ff0\u5fc5\u9009\u5b57\u6bb5\u5916\uff0cCRR \u8fd8\u63d0\u4f9b\u4e86\u591a\u79cd\u53ef\u9009\u7684\u91cd\u542f\u7b56\u7565\uff1a\\n\\n```yaml\\nspec:\\n  # ...\\n  strategy:\\n    failurePolicy: Fail\\n    orderedRecreate: false\\n    terminationGracePeriodSeconds: 30\\n    unreadyGracePeriodSeconds: 3\\n    minStartedSeconds: 10\\n  activeDeadlineSeconds: 300\\n  ttlSecondsAfterFinished: 1800\\n```\\n\\n- `failurePolicy`: Fail \u6216 Ignore\uff0c\u9ed8\u8ba4 Fail\uff1b\u8868\u793a\u4e00\u65e6\u6709\u67d0\u4e2a\u5bb9\u5668\u505c\u6b62\u6216\u91cd\u5efa\u5931\u8d25\uff0cCRR \u7acb\u5373\u7ed3\u675f\\n- `orderedRecreate`: \u9ed8\u8ba4 false\uff1btrue \u8868\u793a\u5217\u8868\u6709\u591a\u4e2a\u5bb9\u5668\u65f6\uff0c\u7b49\u524d\u4e00\u4e2a\u5bb9\u5668\u91cd\u5efa\u5b8c\u6210\u4e86\uff0c\u518d\u5f00\u59cb\u91cd\u5efa\u4e0b\u4e00\u4e2a\\n- `terminationGracePeriodSeconds`: \u7b49\u5f85\u5bb9\u5668\u4f18\u96c5\u9000\u51fa\u7684\u65f6\u95f4\uff0c\u4e0d\u586b\u9ed8\u8ba4\u7528 Pod \u4e2d\u5b9a\u4e49\u7684\u65f6\u95f4\\n- `unreadyGracePeriodSeconds`: \u5728\u91cd\u5efa\u4e4b\u524d\u5148\u628a Pod \u8bbe\u4e3a not ready\uff0c\u5e76\u7b49\u5f85\u8fd9\u6bb5\u65f6\u95f4\u540e\u518d\u5f00\u59cb\u6267\u884c\u91cd\u5efa\\n  -   \u6ce8\uff1a\u8be5\u529f\u80fd\u4f9d\u8d56\u4e8e KruisePodReadinessGate \u8fd9\u4e2a feature-gate \u8981\u6253\u5f00\uff0c\u540e\u8005\u4f1a\u5728\u6bcf\u4e2a Pod \u521b\u5efa\u7684\u65f6\u5019\u6ce8\u5165\u4e00\u4e2a readinessGate\u3002 \u5426\u5219\uff0c\u9ed8\u8ba4\u53ea\u4f1a\u7ed9 Kruise workload \u521b\u5efa\u7684 Pod \u6ce8\u5165 readinessGate\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u6709\u8fd9\u4e9b Pod \u624d\u80fd\u5728 CRR \u91cd\u5efa\u65f6\u4f7f\u7528 unreadyGracePeriodSeconds\\n- `minStartedSeconds`: \u91cd\u5efa\u540e\u65b0\u5bb9\u5668\u81f3\u5c11\u4fdd\u6301\u8fd0\u884c\u8fd9\u6bb5\u65f6\u95f4\uff0c\u624d\u8ba4\u4e3a\u8be5\u5bb9\u5668\u91cd\u5efa\u6210\u529f\\n- `activeDeadlineSeconds`: \u5982\u679c CRR \u6267\u884c\u8d85\u8fc7\u8fd9\u4e2a\u65f6\u95f4\uff0c\u5219\u76f4\u63a5\u6807\u8bb0\u4e3a\u7ed3\u675f\uff08\u672a\u5b8c\u6210\u7684\u5bb9\u5668\u6807\u8bb0\u4e3a\u5931\u8d25\uff09\\n- `ttlSecondsAfterFinished`: CRR \u7ed3\u675f\u540e\uff0c\u8fc7\u4e86\u8fd9\u6bb5\u65f6\u95f4\u81ea\u52a8\u88ab\u5220\u9664\u6389\\n\\n\u5b9e\u73b0\u539f\u7406\uff1a\u5f53\u7528\u6237\u521b\u5efa\u4e86 CRR \u540e\uff0c\u7ecf\u8fc7\u4e86 kruise-manager \u4e2d\u5fc3\u7aef\u7684\u521d\u6b65\u5904\u7406\uff0c\u4f1a\u88ab Pod \u6240\u5728\u8282\u70b9\u4e0a\u7684 kruise-daemon \u6536\u5230\u5e76\u5f00\u59cb\u6267\u884c\u3002\u6267\u884c\u7684\u8fc7\u7a0b\u5982\u4e0b\uff1a\\n\\n1. \u5982\u679c Pod \u5bb9\u5668\u5b9a\u4e49\u4e86 preStop\uff0ckruise-daemon \u4f1a\u5148\u8d70 CRI \u8fd0\u884c\u65f6 exec \u5230\u5bb9\u5668\u4e2d\u6267\u884c preStop\\n2. \u5982\u679c\u6ca1\u6709 preStop \u6216\u6267\u884c\u5b8c\u6210\uff0ckruise-daemon \u8c03\u7528 CRI \u63a5\u53e3\u5c06\u5bb9\u5668\u505c\u6b62\\n3. kubelet \u611f\u77e5\u5230\u5bb9\u5668\u9000\u51fa\uff0c\u5219\u4f1a\u65b0\u5efa\u4e00\u4e2a \u201c\u5e8f\u53f7\u201d \u9012\u589e\u7684\u65b0\u5bb9\u5668\uff0c\u5e76\u5f00\u59cb\u542f\u52a8\uff08\u4ee5\u53ca\u6267\u884c postStart\uff09\\n4. kruise-daemon \u611f\u77e5\u5230\u65b0\u5bb9\u5668\u542f\u52a8\u6210\u529f\uff0c\u4e0a\u62a5 CRR \u91cd\u542f\u5b8c\u6210\\n\\n![ContainerRecreateRequest](/img/docs/user-manuals/containerrecreaterequest.png)\\n\\n\u4e0a\u8ff0\u7684\u5bb9\u5668 \u201c\u5e8f\u53f7\u201d \u5176\u5b9e\u5c31\u5bf9\u5e94\u4e86 Pod status \u4e2d kubelet \u4e0a\u62a5\u7684 restartCount\u3002\u56e0\u6b64\uff0c\u5728\u5bb9\u5668\u91cd\u542f\u540e\u4f1a\u770b\u5230 Pod \u7684 restartCount \u589e\u52a0\u3002\u53e6\u5916\uff0c\u56e0\u4e3a\u5bb9\u5668\u53d1\u751f\u4e86\u91cd\u5efa\uff0c\u4e4b\u524d\u4e34\u65f6\u5199\u5230\u65e7\u5bb9\u5668 rootfs \u4e2d\u7684\u6587\u4ef6\u4f1a\u4e22\u5931\uff0c\u4f46\u662f volume mount \u6302\u8f7d\u5377\u4e2d\u7684\u6570\u636e\u4ecd\u7136\u5b58\u5728\u3002\\n\\n## \u7ea7\u8054\u5220\u9664\u9632\u62a4\\n\\nKubernetes \u7684\u9762\u5411\u7ec8\u6001\u81ea\u52a8\u5316\u662f\u4e00\u628a \u201c\u53cc\u5203\u5251\u201d\uff0c\u5b83\u65e2\u4e3a\u5e94\u7528\u5e26\u6765\u4e86\u58f0\u660e\u5f0f\u7684\u90e8\u7f72\u80fd\u529b\uff0c\u540c\u65f6\u4e5f\u6f5c\u5728\u5730\u4f1a\u5c06\u4e00\u4e9b\u8bef\u64cd\u4f5c\u884c\u4e3a\u88ab\u7ec8\u6001\u5316\u653e\u5927\u3002\u4f8b\u5982\u5b83\u7684 \u201c\u7ea7\u8054\u5220\u9664\u201d \u673a\u5236\uff0c\u5373\u6b63\u5e38\u60c5\u51b5\uff08\u975e orphan \u5220\u9664\uff09\u4e0b\u4e00\u65e6\u7236\u7c7b\u8d44\u6e90\u88ab\u5220\u9664\uff0c\u5219\u6240\u6709\u5b50\u7c7b\u8d44\u6e90\u90fd\u4f1a\u88ab\u5173\u8054\u5220\u9664\uff1a\\n\\n1. \u5220\u9664\u4e00\u4e2a CRD\uff0c\u5176\u6240\u6709\u5bf9\u5e94\u7684 CR \u90fd\u88ab\u6e05\u7406\u6389\\n2. \u5220\u9664\u4e00\u4e2a namespace\uff0c\u8fd9\u4e2a\u547d\u540d\u7a7a\u95f4\u4e0b\u5305\u62ec Pod \u5728\u5185\u6240\u6709\u8d44\u6e90\u90fd\u88ab\u4e00\u8d77\u5220\u9664\\n3. \u5220\u9664\u4e00\u4e2a workload\uff08Deployment/StatefulSet/...\uff09\uff0c\u5219\u4e0b\u5c5e\u6240\u6709 Pod \u88ab\u5220\u9664\\n\\n\u7c7b\u4f3c\u8fd9\u79cd \u201c\u7ea7\u8054\u5220\u9664\u201d \u5e26\u6765\u7684\u6545\u969c\uff0c\u6211\u4eec\u5df2\u7ecf\u542c\u5230\u4e0d\u5c11\u793e\u533a K8s \u7528\u6237\u548c\u5f00\u53d1\u8005\u5e26\u6765\u7684\u62b1\u6028\u3002\u5bf9\u4e8e\u4efb\u4f55\u4e00\u5bb6\u4f01\u4e1a\u6765\u8bf4\uff0c\u5176\u751f\u4ea7\u73af\u5883\u53d1\u751f\u8fd9\u79cd\u89c4\u6a21\u8bef\u5220\u9664\u90fd\u662f\u4e0d\u53ef\u627f\u53d7\u4e4b\u75db\u3002\\n\\n\u56e0\u6b64\uff0c\u5728 Kruise v0.9.0 \u7248\u672c\u4e2d\uff0c\u6211\u4eec\u5efa\u7acb\u4e86\u9632\u7ea7\u8054\u5220\u9664\u80fd\u529b\uff0c\u671f\u671b\u80fd\u4e3a\u66f4\u591a\u7684\u7528\u6237\u5e26\u6765\u7a33\u5b9a\u6027\u4fdd\u969c\u3002\u5728\u5f53\u524d\u7248\u672c\u4e2d\u5982\u679c\u9700\u8981\u4f7f\u7528\u8be5\u529f\u80fd\uff0c\u5219\u5728\u5b89\u88c5\u6216\u5347\u7ea7 Kruise \u7684\u65f6\u5019\u9700\u8981\u663e\u5f0f\u6253\u5f00 `ResourcesDeletionProtection` \u8fd9\u4e2a feature-gate\u3002\\n\\n\u5bf9\u4e8e\u9700\u8981\u9632\u62a4\u5220\u9664\u7684\u8d44\u6e90\u5bf9\u8c61\uff0c\u7528\u6237\u53ef\u4ee5\u7ed9\u5176\u6253\u4e0a policy.kruise.io/delete-protection \u6807\u7b7e\uff0cvalue \u53ef\u4ee5\u6709\u4e24\u79cd\uff1a\\n\\n- Always: \u8868\u793a\u8fd9\u4e2a\u5bf9\u8c61\u7981\u6b62\u88ab\u5220\u9664\uff0c\u9664\u975e\u4e0a\u8ff0 label \u88ab\u53bb\u6389\\n- Cascading\uff1a\u8fd9\u4e2a\u5bf9\u8c61\u5982\u679c\u8fd8\u6709\u53ef\u7528\u7684\u4e0b\u5c5e\u8d44\u6e90\uff0c\u5219\u7981\u6b62\u88ab\u5220\u9664\\n\\n\u76ee\u524d\u652f\u6301\u7684\u8d44\u6e90\u7c7b\u578b\u3001\u4ee5\u53ca cascading \u7ea7\u8054\u5173\u7cfb\u5982\u4e0b\uff1a\\n\\n| Kind                        | Group                  | Version            | **Cascading** judgement                            |\\n| --------------------------- | ---------------------- | ------------------ | ----------------------------------------------------\\n| `Namespace`                 | core                   | v1                 | whether there is active Pods in this namespace     |\\n| `CustomResourceDefinition`  | apiextensions.k8s.io   | v1beta1, v1        | whether there is existing CRs of this CRD          |\\n| `Deployment`                | apps                   | v1                 | whether the replicas is 0                          |\\n| `StatefulSet`               | apps                   | v1                 | whether the replicas is 0                          |\\n| `ReplicaSet`                | apps                   | v1                 | whether the replicas is 0                          |\\n| `CloneSet`                  | apps.kruise.io         | v1alpha1           | whether the replicas is 0                          |\\n| `StatefulSet`               | apps.kruise.io         | v1alpha1, v1beta1  | whether the replicas is 0                          |\\n| `UnitedDeployment`          | apps.kruise.io         | v1alpha1           | whether the replicas is 0                          |\\n\\n## CloneSet \u65b0\u589e\u529f\u80fd\\n\\n### \u5220\u9664\u4f18\u5148\u7ea7\\n\\n`controller.kubernetes.io/pod-deletion-cost` \u662f\u4ece Kubernetes 1.21 \u7248\u672c\u540e\u52a0\u5165\u7684 annotation\uff0cReplicaSet \u5728\u7f29\u5bb9\u65f6\u4f1a\u53c2\u8003\u8fd9\u4e2a cost \u6570\u503c\u6765\u6392\u5e8f\u3002 CloneSet \u4ece Kruise v0.9.0 \u7248\u672c\u540e\u4e5f\u540c\u6837\u652f\u6301\u4e86\u8fd9\u4e2a\u529f\u80fd\u3002\\n\\n\u7528\u6237\u53ef\u4ee5\u628a\u8fd9\u4e2a annotation \u914d\u7f6e\u5230 pod \u4e0a\uff0c\u5b83\u7684 value \u6570\u503c\u662f int \u7c7b\u578b\uff0c\u8868\u793a\u8fd9\u4e2a pod \u76f8\u8f83\u4e8e\u540c\u4e2a CloneSet \u4e0b\u5176\u4ed6 pod \u7684 \\"\u5220\u9664\u4ee3\u4ef7\\"\uff0c\u4ee3\u4ef7\u8d8a\u5c0f\u7684 pod \u5220\u9664\u4f18\u5148\u7ea7\u76f8\u5bf9\u8d8a\u9ad8\u3002 \u6ca1\u6709\u8bbe\u7f6e\u8fd9\u4e2a annotation \u7684 pod \u9ed8\u8ba4 deletion cost \u662f 0\u3002\\n\\n\u6ce8\u610f\u8fd9\u4e2a\u5220\u9664\u987a\u5e8f\u5e76\u4e0d\u662f\u5f3a\u5236\u4fdd\u8bc1\u7684\uff0c\u56e0\u4e3a\u771f\u5b9e\u7684 pod \u7684\u5220\u9664\u7c7b\u4f3c\u4e8e\u4e0b\u8ff0\u987a\u5e8f\uff1a\\n\\n1. \u672a\u8c03\u5ea6 < \u5df2\u8c03\u5ea6\\n2. PodPending < PodUnknown < PodRunning\\n3. Not ready < ready\\n4. **\u8f83\u5c0f pod-deletion cost < \u8f83\u5927 pod-deletion cost**\\n5. \u5904\u4e8e Ready \u65f6\u95f4\u8f83\u77ed < \u8f83\u957f\\n6. \u5bb9\u5668\u91cd\u542f\u6b21\u6570\u8f83\u591a < \u8f83\u5c11\\n7. \u521b\u5efa\u65f6\u95f4\u8f83\u77ed < \u8f83\u957f\\n\\n### \u914d\u5408\u539f\u5730\u5347\u7ea7\u7684\u955c\u50cf\u9884\u70ed\\n\\n\u5f53\u4f7f\u7528 CloneSet \u505a\u5e94\u7528\u539f\u5730\u5347\u7ea7\u65f6\uff0c\u53ea\u4f1a\u5347\u7ea7\u5bb9\u5668\u955c\u50cf\u3001\u800c Pod \u4e0d\u4f1a\u53d1\u751f\u91cd\u5efa\u3002\u8fd9\u5c31\u4fdd\u8bc1\u4e86 Pod \u5347\u7ea7\u524d\u540e\u6240\u5728 node \u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u4ece\u800c\u5728\u539f\u5730\u5347\u7ea7\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c CloneSet \u63d0\u524d\u5728\u6240\u6709 Pod \u8282\u70b9\u4e0a\u5148\u628a\u65b0\u7248\u672c\u955c\u50cf\u62c9\u53d6\u597d\uff0c\u5219\u5728\u540e\u7eed\u7684\u53d1\u5e03\u6279\u6b21\u4e2d Pod \u539f\u5730\u5347\u7ea7\u901f\u5ea6\u4f1a\u5f97\u5230\u5927\u5e45\u5ea6\u63d0\u9ad8\u3002\\n\\n\u5728\u5f53\u524d\u7248\u672c\u4e2d\u5982\u679c\u9700\u8981\u4f7f\u7528\u8be5\u529f\u80fd\uff0c\u5219\u5728\u5b89\u88c5\u6216\u5347\u7ea7 Kruise \u7684\u65f6\u5019\u9700\u8981\u663e\u5f0f\u6253\u5f00 `PreDownloadImageForInPlaceUpdate` \u8fd9\u4e2a feature-gate\u3002\u6253\u5f00\u540e\uff0c\u5f53\u7528\u6237\u66f4\u65b0\u4e86 CloneSet template \u4e2d\u7684\u955c\u50cf\u3001\u4e14\u53d1\u5e03\u7b56\u7565\u652f\u6301\u539f\u5730\u5347\u7ea7\uff0c\u5219 CloneSet \u4f1a\u81ea\u52a8\u4e3a\u8fd9\u4e2a\u65b0\u955c\u50cf\u521b\u5efa ImagePullJob \u5bf9\u8c61\uff08OpenKruise \u63d0\u4f9b\u7684\u6279\u91cf\u955c\u50cf\u9884\u70ed\u529f\u80fd\uff09\uff0c\u6765\u63d0\u524d\u5728 Pod \u6240\u5728\u8282\u70b9\u4e0a\u9884\u70ed\u65b0\u955c\u50cf\u3002\\n\\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b CloneSet \u7ed9 ImagePullJob \u914d\u7f6e\u7684\u5e76\u53d1\u5ea6\u662f 1\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u4e2a\u8282\u70b9\u62c9\u955c\u50cf\u3002 \u5982\u679c\u9700\u8981\u8c03\u6574\uff0c\u4f60\u53ef\u4ee5\u5728 CloneSet annotation \u4e0a\u8bbe\u7f6e\u5176\u955c\u50cf\u9884\u70ed\u65f6\u7684\u5e76\u53d1\u5ea6\uff1a\\n\\n```yaml\\napiVersion: apps.kruise.io/v1alpha1\\nkind: CloneSet\\nmetadata:\\n  annotations:\\n    apps.kruise.io/image-predownload-parallelism: \\"5\\"\\n```\\n\\n### \u5148\u6269\u518d\u7f29\u7684 Pod \u7f6e\u6362\u65b9\u5f0f\\n\\n\u5728\u8fc7\u53bb\u7248\u672c\u4e2d\uff0cCloneSet \u7684 `maxUnavailable`\u3001`maxSurge` \u7b56\u7565\u53ea\u5bf9\u5e94\u7528\u53d1\u5e03\u8fc7\u7a0b\u751f\u6548\u3002\u800c\u4ece Kruise v0.9.0 \u7248\u672c\u5f00\u59cb\uff0c\u8fd9\u4e24\u4e2a\u7b56\u7565\u540c\u6837\u4f1a\u5bf9 Pod \u6307\u5b9a\u5220\u9664\u751f\u6548\u3002\\n\\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u7528\u6237\u901a\u8fc7 `podsToDelete` \u6216 `apps.kruise.io/specified-delete: true` \u65b9\u5f0f\uff08\u5177\u4f53\u89c1\u5b98\u7f51\u6587\u6863\uff09\u6765\u6307\u5b9a\u4e00\u4e2a\u6216\u591a\u4e2a Pod \u671f\u671b\u5220\u9664\u65f6\uff0cCloneSet \u53ea\u4f1a\u5728\u5f53\u524d\u4e0d\u53ef\u7528 Pod \u6570\u91cf\uff08\u76f8\u5bf9\u4e8e replicas \u603b\u6570\uff09\u5c0f\u4e8e maxUnavailable \u7684\u65f6\u5019\u624d\u6267\u884c\u5220\u9664\u3002\u540c\u65f6\uff0c\u5982\u679c\u7528\u6237\u914d\u7f6e\u4e86 maxSurge \u7b56\u7565\uff0c\u5219 CloneSet \u6709\u53ef\u80fd\u4f1a\u5148\u521b\u5efa\u4e00\u4e2a\u65b0 Pod\u3001\u7b49\u5f85\u65b0 Pod ready\u3001\u518d\u5220\u9664\u6307\u5b9a\u7684\u65e7 Pod\u3002\\n\\n\u5177\u4f53\u91c7\u7528\u4ec0\u4e48\u6837\u7684\u7f6e\u6362\u65b9\u5f0f\uff0c\u53d6\u51b3\u4e8e\u5f53\u65f6\u7684 maxUnavailable \u548c\u5b9e\u9645\u4e0d\u53ef\u7528 Pod \u6570\u91cf\u3002\u6bd4\u5982\uff1a\\n\\n- \u5bf9\u4e8e\u4e00\u4e2a CloneSet `maxUnavailable=2, maxSurge=1` \u4e14\u6709\u4e00\u4e2a `pod-a` \u5904\u4e8e\u4e0d\u53ef\u7528\u72b6\u6001\uff0c \u5982\u679c\u4f60\u5bf9\u53e6\u4e00\u4e2a `pod-b` \u6307\u5b9a\u5220\u9664\uff0c \u90a3\u4e48 CloneSet \u4f1a\u7acb\u5373\u5220\u9664\u5b83\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a\u65b0 Pod\u3002\\n- \u5bf9\u4e8e\u4e00\u4e2a CloneSet `maxUnavailable=1, maxSurge=1` \u4e14\u6709\u4e00\u4e2a `pod-a` \u5904\u4e8e\u4e0d\u53ef\u7528\u72b6\u6001\uff0c \u5982\u679c\u4f60\u5bf9\u53e6\u4e00\u4e2a `pod-b` \u6307\u5b9a\u5220\u9664\uff0c \u90a3\u4e48 CloneSet \u4f1a\u5148\u65b0\u5efa\u4e00\u4e2a Pod\u3001\u7b49\u5f85\u5b83 ready\uff0c\u6700\u540e\u518d\u5220\u9664 pod-b\u3002\\n- \u5bf9\u4e8e\u4e00\u4e2a CloneSet `maxUnavailable=1, maxSurge=1` \u4e14\u6709\u4e00\u4e2a `pod-a` \u5904\u4e8e\u4e0d\u53ef\u7528\u72b6\u6001\uff0c \u5982\u679c\u4f60\u5bf9\u8fd9\u4e2a `pod-a` \u6307\u5b9a\u5220\u9664\uff0c \u90a3\u4e48 CloneSet \u4f1a\u7acb\u5373\u5220\u9664\u5b83\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a\u65b0 Pod\u3002\\n- ...\\n\\n### \u57fa\u4e8e partition \u7ec8\u6001\u7684\u9ad8\u6548\u56de\u6eda\\n\\n\u5728\u539f\u751f\u7684 workload \u4e2d\uff0cDeployment \u81ea\u8eab\u53d1\u5e03\u4e0d\u652f\u6301\u7070\u5ea6\u53d1\u5e03\uff0cStatefulSet \u6709 partition \u8bed\u4e49\u6765\u5141\u8bb8\u7528\u6237\u63a7\u5236\u7070\u5ea6\u5347\u7ea7\u7684\u6570\u91cf\uff1b\u800c Kruise workload \u5982 CloneSet\u3001Advanced StatefulSet\uff0c\u4e5f\u90fd\u63d0\u4f9b\u4e86 partition \u6765\u652f\u6301\u7070\u5ea6\u5206\u6279\u3002\\n\\n\u5bf9\u4e8e CloneSet\uff0cPartition \u7684\u8bed\u4e49\u662f **\u4fdd\u7559\u65e7\u7248\u672c Pod \u7684\u6570\u91cf\u6216\u767e\u5206\u6bd4**\u3002\u6bd4\u5982\u8bf4\u4e00\u4e2a 100 \u4e2a\u526f\u672c\u7684 CloneSet\uff0c\u5728\u5347\u7ea7\u955c\u50cf\u65f6\u5c06 partition \u6570\u503c\u9636\u6bb5\u6027\u6539\u4e3a 80 -> 60 -> 40 -> 20 -> 0\uff0c\u5219\u5b8c\u6210\u4e86\u5206 5 \u6279\u6b21\u53d1\u5e03\u3002\\n\\n\u4f46\u8fc7\u53bb\uff0c\u4e0d\u7ba1\u662f Deployment\u3001StatefulSet \u8fd8\u662f CloneSet\uff0c\u5728\u53d1\u5e03\u7684\u8fc7\u7a0b\u4e2d\u5982\u679c\u60f3\u8981\u56de\u6eda\uff0c\u90fd\u5fc5\u987b\u5c06 template \u4fe1\u606f\uff08\u955c\u50cf\uff09\u91cd\u65b0\u6539\u56de\u8001\u7248\u672c\u3002\u540e\u4e24\u8005\u5728\u7070\u5ea6\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c06 partition \u8c03\u5c0f\u4f1a\u89e6\u53d1\u65e7\u7248\u672c\u5347\u7ea7\u4e3a\u65b0\u7248\u672c\uff0c\u4f46\u518d\u6b21 partition \u8c03\u5927\u5219\u4e0d\u4f1a\u5904\u7406\u3002\\n\\n\u4ece v0.9.0 \u7248\u672c\u5f00\u59cb\uff0cCloneSet \u7684 partition \u652f\u6301\u4e86 \u201c\u7ec8\u6001\u56de\u6eda\u201d \u529f\u80fd\u3002\u5982\u679c\u5728\u5b89\u88c5\u6216\u5347\u7ea7 Kruise \u7684\u65f6\u5019\u6253\u5f00\u4e86 `CloneSetPartitionRollback` \u8fd9\u4e2a feature-gate\uff0c\u5219\u5f53\u7528\u6237\u5c06 partition \u8c03\u5927\u65f6\uff0cCloneSet \u4f1a\u5c06\u5bf9\u5e94\u6570\u91cf\u7684\u65b0\u7248\u672c Pod \u91cd\u65b0\u56de\u6eda\u5230\u8001\u7248\u672c\u3002\\n\\n\u8fd9\u6837\u5e26\u6765\u7684\u597d\u5904\u662f\u663e\u800c\u6613\u89c1\u7684\uff1a\u5728\u7070\u5ea6\u53d1\u5e03\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ea\u9700\u8981\u524d\u540e\u8c03\u8282 partition \u6570\u503c\uff0c\u5c31\u80fd\u7075\u6d3b\u5f97\u63a7\u5236\u65b0\u65e7\u7248\u672c\u7684\u6bd4\u4f8b\u6570\u91cf\u3002\u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cCloneSet \u6240\u4f9d\u636e\u7684 \u201c\u65b0\u65e7\u7248\u672c\u201d \u5bf9\u5e94\u7684\u662f\u5176 status \u4e2d\u7684 updateRevision \u548c currentRevision\uff1a\\n\\n- updateRevision\uff1a\u5bf9\u5e94\u5f53\u524d CloneSet \u6240\u5b9a\u4e49\u7684 template \u7248\u672c\\n- currentRevision\uff1a\u8be5 CloneSet \u524d\u4e00\u6b21\u5168\u91cf\u53d1\u5e03\u6210\u529f\u7684 template \u7248\u672c\\n\\n### \u77ed hash\\n\\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCloneSet \u5728 Pod label \u4e2d\u8bbe\u7f6e\u7684 `controller-revision-hash` \u503c\u4e3a `ControllerRevision` \u7684\u5b8c\u6574\u540d\u5b57\uff0c\u6bd4\u5982\uff1a\\n\\n```yaml\\napiVersion: v1\\nkind: Pod\\nmetadata:\\n  labels:\\n    controller-revision-hash: demo-cloneset-956df7994\\n```\\n\\n\u5b83\u662f\u901a\u8fc7 CloneSet \u540d\u5b57\u548c ControllerRevision hash \u503c\u62fc\u63a5\u800c\u6210\u3002 \u901a\u5e38 hash \u503c\u957f\u5ea6\u4e3a 8~10 \u4e2a\u5b57\u7b26\uff0c\u800c Kubernetes \u4e2d\u7684 label \u503c\u4e0d\u80fd\u8d85\u8fc7 63 \u4e2a\u5b57\u7b26\u3002 \u56e0\u6b64 CloneSet \u7684\u540d\u5b57\u4e00\u822c\u662f\u4e0d\u80fd\u8d85\u8fc7 52 \u4e2a\u5b57\u7b26\u7684\uff0c\u5982\u679c\u8d85\u8fc7\u4e86\uff0c\u5219\u65e0\u6cd5\u6210\u529f\u521b\u5efa\u51fa Pod\u3002\\n\\n\u5728 v0.9.0 \u7248\u672c\u5f15\u5165\u4e86 `CloneSetShortHash` \u65b0\u7684 feature-gate\u3002 \u5982\u679c\u5b83\u88ab\u6253\u5f00\uff0cCloneSet \u53ea\u4f1a\u5c06 Pod \u4e2d\u7684 `controller-revision-hash` \u7684\u503c\u53ea\u8bbe\u7f6e\u4e3a hash \u503c\uff0c\u6bd4\u5982 956df7994\uff0c\u56e0\u6b64 CloneSet \u540d\u5b57\u7684\u957f\u5ea6\u4e0d\u4f1a\u6709\u4efb\u4f55\u9650\u5236\u4e86\u3002\uff08\u5373\u4f7f\u542f\u7528\u8be5\u529f\u80fd\uff0cCloneSet \u4ecd\u7136\u4f1a\u8bc6\u522b\u548c\u7ba1\u7406\u8fc7\u53bb\u5b58\u91cf\u7684 revision label \u4e3a\u5b8c\u6574\u683c\u5f0f\u7684 Pod\u3002\uff09\\n\\n## SidecarSet \u65b0\u589e\u529f\u80fd\\n\\n### Sidecar \u70ed\u5347\u7ea7\\n\\nSidecarSet \u662f Kruise \u63d0\u4f9b\u7684\u72ec\u7acb\u7ba1\u7406 sidecar \u5bb9\u5668\u7684 workload\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7 SidecarSet\uff0c\u6765\u5728\u4e00\u5b9a\u8303\u56f4\u7684 Pod \u4e2d\u6ce8\u5165\u548c\u5347\u7ea7\u6307\u5b9a\u7684 sidecar \u5bb9\u5668\u3002\\n\\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0csidecar \u7684\u72ec\u7acb\u539f\u5730\u5347\u7ea7\u662f\u5148\u505c\u6b62\u65e7\u7248\u672c\u7684\u5bb9\u5668\uff0c\u7136\u540e\u521b\u5efa\u65b0\u7248\u672c\u7684\u5bb9\u5668\u3002\u8fd9\u79cd\u65b9\u5f0f\u66f4\u52a0\u9002\u5408\u4e0d\u5f71\u54cdPod\u670d\u52a1\u53ef\u7528\u6027\u7684sidecar\u5bb9\u5668\uff0c\u6bd4\u5982\u8bf4\u65e5\u5fd7\u6536\u96c6 agent\uff0c\u4f46\u662f\u5bf9\u4e8e\u5f88\u591a\u4ee3\u7406\u6216\u8fd0\u884c\u65f6\u7684 sidecar \u5bb9\u5668\uff0c\u4f8b\u5982 Istio Envoy\uff0c\u8fd9\u79cd\u5347\u7ea7\u65b9\u6cd5\u5c31\u6709\u95ee\u9898\u4e86\u3002Envoy \u4f5c\u4e3a Pod \u4e2d\u7684\u4e00\u4e2a\u4ee3\u7406\u5bb9\u5668\uff0c\u4ee3\u7406\u4e86\u6240\u6709\u7684\u6d41\u91cf\uff0c\u5982\u679c\u76f4\u63a5\u91cd\u542f\u5347\u7ea7\uff0cPod \u670d\u52a1\u7684\u53ef\u7528\u6027\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u5982\u679c\u9700\u8981\u5355\u72ec\u5347\u7ea7 envoy sidecar\uff0c\u5c31\u9700\u8981\u590d\u6742\u7684 grace \u7ec8\u6b62\u548c\u534f\u8c03\u673a\u5236\u3002\u6240\u4ee5\u6211\u4eec\u4e3a\u8fd9\u79cd sidecar \u5bb9\u5668\u7684\u5347\u7ea7\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b0\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5373\u70ed\u5347\u7ea7\uff08hot upgrade\uff09\u3002\\n\\n```yaml\\napiVersion: apps.kruise.io/v1alpha1\\nkind: SidecarSet\\nspec:\\n  # ...\\n  containers:\\n  - name: nginx-sidecar\\n    image: nginx:1.18\\n    lifecycle:\\n      postStart:\\n        exec:\\n          command:\\n          - /bin/bash\\n          - -c\\n          - /usr/local/bin/nginx-agent migrate\\n    upgradeStrategy:\\n      upgradeType: HotUpgrade\\n      hotUpgradeEmptyImage: empty:1.0.0\\n```\\n\\n- `upgradeType`: HotUpgrade\u4ee3\u8868\u8be5sidecar\u5bb9\u5668\u7684\u7c7b\u578b\u662fhot upgrade\uff0c\u5c06\u6267\u884c\u70ed\u5347\u7ea7\u65b9\u6848hotUpgradeEmptyImage: \u5f53\u70ed\u5347\u7ea7sidecar\u5bb9\u5668\u65f6\uff0c\u4e1a\u52a1\u5fc5\u987b\u8981\u63d0\u4f9b\u4e00\u4e2aempty\u5bb9\u5668\u7528\u4e8e\u70ed\u5347\u7ea7\u8fc7\u7a0b\u4e2d\u7684\u5bb9\u5668\u5207\u6362\u3002empty\u5bb9\u5668\u540csidecar\u5bb9\u5668\u5177\u6709\u76f8\u540c\u7684\u914d\u7f6e\uff08\u9664\u4e86\u955c\u50cf\u5730\u5740\uff09\uff0c\u4f8b\u5982\uff1acommand, lifecycle, probe\u7b49\uff0c\u4f46\u662f\u5b83\u4e0d\u505a\u4efb\u4f55\u5de5\u4f5c\u3002\\n- `lifecycle.postStart`: \u72b6\u6001\u8fc1\u79fb\uff0c\u8be5\u8fc7\u7a0b\u5b8c\u6210\u70ed\u5347\u7ea7\u8fc7\u7a0b\u4e2d\u7684\u72b6\u6001\u8fc1\u79fb\uff0c\u8be5\u811a\u672c\u9700\u8981\u7531\u4e1a\u52a1\u6839\u636e\u81ea\u8eab\u7684\u7279\u70b9\u81ea\u884c\u5b9e\u73b0\uff0c\u4f8b\u5982\uff1anginx\u70ed\u5347\u7ea7\u9700\u8981\u5b8c\u6210Listen FD\u5171\u4eab\u4ee5\u53ca\u6d41\u91cf\u6392\u6c34\uff08reload\uff09\\n\\n\\n## \u66f4\u591a\\n\\n\u66f4\u591a\u7248\u672c\u53d8\u5316\uff0c\u8bf7\u53c2\u8003 [release page](https://github.com/openkruise/kruise/releases) \u6216 [ChangeLog](https://github.com/openkruise/kruise/blob/master/CHANGELOG.md)"},{"id":"uniteddeployment","metadata":{"permalink":"/zh/blog/uniteddeployment","editUrl":"https://github.com/openkruise/openkruise.io/tree/master/blog/blog/2019-11-20-uniteddeployment.md","source":"@site/blog/2019-11-20-uniteddeployment.md","title":"UnitedDeploymemt - Supporting Multi-domain Workload Management","description":"Ironically, probably every cloud user knew (or should realized that) failures in Cloud resources","date":"2019-11-20T00:00:00.000Z","formattedDate":"2019\u5e7411\u670820\u65e5","tags":[{"label":"workload","permalink":"/zh/blog/tags/workload"},{"label":"uniteddeployment","permalink":"/zh/blog/tags/uniteddeployment"}],"readingTime":6.005,"truncated":false,"authors":[{"name":"Fei Guo","title":"Maintainer of OpenKruise","url":"https://github.com/Fei-Guo","imageURL":"https://github.com/Fei-Guo.png","key":"Fei-Guo"}],"prevItem":{"title":"OpenKruise 0.9.0\uff1a\u65b0\u589ePod\u5bb9\u5668\u91cd\u542f\u3001\u8d44\u6e90\u5220\u9664\u9632\u62a4\u7b49\u529f\u80fd","permalink":"/zh/blog/openkruise-0.9.0"},"nextItem":{"title":"Learning Concurrent Reconciling","permalink":"/zh/blog/learning-concurrent-reconciling"}},"content":"Ironically, probably every cloud user knew (or should realized that) failures in Cloud resources\\nare inevitable. Hence, high availability is probably one of the most desirable features that\\nCloud Provider offers for cloud users. For example, in AWS, each geographic region has \\nmultiple isolated locations known as Availability Zones (AZs). \\nAWS provides various AZ-aware solutions to allow the compute or storage resources of the user\\napplications to be distributed across multiple AZs in order to tolerate AZ failure, which indeed\\nhappened in the past. \\n\\nIn Kubernetes, the concept of AZ is not realized by an API object. Instead,\\nan AZ is usually represented by a group of hosts that have the same location label.\\nAlthough hosts within the same AZ can be identified by labels, the capability of distributing Pods across\\nAZs was missing in Kubernetes default scheduler. Hence it was difficult to use single \\n`StatefulSet` or `Deployment` to perform  AZ-aware Pods deployment. Fortunately, \\nin Kubernetes 1.16, a new feature called [\\"Pod Topology Spread Constraints\\"](https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/)\\nwas introduced. Users now can add new constraints in the Pod Spec, and scheduler\\nwill enforce the constraints so that Pods can be distributed across failure \\ndomains such as AZs, regions or nodes, in a uniform fashion.\\n\\nIn Kruise, **UnitedDeploymemt** provides an alternative to achieve high availability in\\na cluster that consists of multiple fault domains - that is, managing multiple homogeneous \\nworkloads, and each workload is dedicated to a single `Subset`. Pod distribution across AZs is\\ndetermined by the replica number of each workload.\\nSince each `Subset` is associated with a workload, UnitedDeployment can support\\nfiner-grained rollout and deployment strategies. \\nIn addition, UnitedDeploymemt can be further extended to support\\nmultiple clusters! Let us reveal how UnitedDeployment is designed.\\n\\n\\n## Using `Subsets` to describe domain topology\\n\\nUnitedDeploymemt uses `Subset` to represent a failure domain. `Subset` API\\nprimarily specifies the nodes that forms the domain and the number of replicas, or\\nthe percentage of total replicas, run in this domain. UnitedDeployment manages\\nsubset workloads against a specific domain topology, described by a `Subset` array.\\n\\n```\\ntype Topology struct {\\n\\t// Contains the details of each subset.\\n\\tSubsets []Subset\\n}\\n\\ntype Subset struct {\\n\\t// Indicates the name of this subset, which will be used to generate\\n\\t// subset workload name prefix in the format \'<deployment-name>-<subset-name>-\'.\\n\\tName string\\n\\n\\t// Indicates the node select strategy to form the subset.\\n\\tNodeSelector corev1.NodeSelector\\n\\n\\t// Indicates the number of the subset replicas or percentage of it on the\\n\\t// UnitedDeployment replicas.\\n\\tReplicas *intstr.IntOrString\\n}\\n```\\n\\nThe specification of the subset workload is saved in `Spec.Template`. UnitedDeployment\\nonly supports `StatefulSet` subset workload as of now. An interesting part of `Subset`\\ndesign is that now user can specify **customized Pod distribution** across AZs, which is not\\nnecessarily a uniform distribution in some cases. For example, if the AZ\\nutilization or capacity are not homogeneous, evenly distributing Pods may lead to Pod deployment\\nfailure due to lack of resources. If users have prior knowledge about AZ resource capacity/usage,\\nUnitedDeployment can help to apply an optimal Pod distribution to ensure overall\\ncluster utilization remains balanced. Of course, if not specified, a uniform Pod distribution\\nwill be applied to maximize availability.\\n\\n## Customized subset rollout `Partitions`\\n\\nUser can update all the UnitedDeployment subset workloads by providing a\\nnew version of subset workload template.\\nNote that UnitedDeployment does not control\\nthe entire rollout process of all subset workloads, which is typically done by another rollout\\ncontroller built on top of it. Since the replica number in each `Subset` can be different,\\nit will be much more convenient to allow user to specify the individual rollout `Partition` of each\\nsubset workload instead of using one `Partition` to rule all, so that they can be upgraded in the same pace.\\nUnitedDeployment provides `ManualUpdate` strategy to customize per subset rollout `Partition`.\\n\\n```\\ntype UnitedDeploymentUpdateStrategy struct {\\n\\t// Type of UnitedDeployment update.\\n\\tType UpdateStrategyType\\n\\t// Indicates the partition of each subset.\\n\\tManualUpdate *ManualUpdate\\n}\\n\\ntype ManualUpdate struct {\\n\\t// Indicates number of subset partition.\\n\\tPartitions map[string]int32\\n}\\n```\\n\\n![multi-cluster controller](/img/blog/2019-11-20-uniteddeployment/uniteddeployment-1.png)\\n\\nThis makes it fairly easy to coordinate multiple subsets rollout. For example,\\nas illustrated in Figure 1, assuming UnitedDeployment manages three subsets and\\ntheir replica numbers are 4, 2, 2 respectively, a rollout \\ncontroller can realize a canary release plan of upgrading 50% of Pods in each\\nsubset at a time by setting subset partitions to 2, 1, 1 respectively. \\nThe same cannot be easily achieved by using a single workload controller like `StatefulSet`\\nor `Deployment`.\\n\\n## Multi-Cluster application management (In future)\\n\\nUnitedDeployment can be extended to support multi-cluster workload\\nmanagement. The idea is that `Subsets` may not only\\nreside in one cluster, but also spread over multiple clusters. \\nMore specifically, domain topology specification will associate\\na `ClusterRegistryQuerySpec`, which describes the clusters that UnitedDeployment\\nmay distribute Pods to. Each cluster is represented by a custom resource managed by a\\nClusterRegistry controller using Kubernetes [cluster registry APIs](https://github.com/kubernetes/cluster-registry).\\n\\n```\\ntype Topology struct {\\n  // ClusterRegistryQuerySpec is used to find the all the clusters that\\n  // the workload may be deployed to. \\n  ClusterRegistry *ClusterRegistryQuerySpec\\n  // Contains the details of each subset including the target cluster name and\\n  // the node selector in target cluster.\\n  Subsets []Subset\\n}\\n\\ntype ClusterRegistryQuerySpec struct {\\n  // Namespaces that the cluster objects reside.\\n  // If not specified, default namespace is used.\\n  Namespaces []string\\n  // Selector is the label matcher to find all qualified clusters.\\n  Selector   map[string]string\\n  // Describe the kind and APIversion of the cluster object.\\n  ClusterType metav1.TypeMeta\\n}\\n\\ntype Subset struct {\\n  Name string\\n\\n  // The name of target cluster. The controller will validate that\\n  // the TargetCluster exits based on Topology.ClusterRegistry.\\n  TargetCluster *TargetCluster\\n\\n  // Indicate the node select strategy in the Subset.TargetCluster.\\n  // If Subset.TargetCluster is not set, node selector strategy refers to\\n  // current cluster.\\n  NodeSelector corev1.NodeSelector\\n\\n  Replicas *intstr.IntOrString \\n}\\n\\ntype TargetCluster struct {\\n  // Namespace of the target cluster CRD\\n  Namespace string\\n  // Target cluster name\\n  Name string\\n}\\n```\\n\\nA new `TargetCluster` field is added to the `Subset` API. If it presents, the\\n`NodeSelector` indicates the node selection logic in the target cluster. Now\\nUnitedDeployment controller can distribute application Pods to multiple clusters by\\ninstantiating a `StatefulSet` workload in each target cluster with a specific\\nreplica number (or a percentage of total replica), as illustrated in Figure 2.\\n\\n![multi-cluster\\tcontroller](/img/blog/2019-11-20-uniteddeployment/uniteddeployment-2.png)\\n\\nAt a first glance, UnitedDeployment looks more like a federation\\ncontroller following the design pattern of [Kubefed](https://github.com/kubernetes-sigs/kubefed),\\nbut it isn\'t. The fundamental difference is that Kubefed focuses on propagating arbitrary\\nobject types to remote clusters instead of managing an application across clusters. \\nIn this example, had a Kubefed style controller been used, each `StatefulSet` workload in\\nindividual cluster would have a replica of 100. UnitedDeployment focuses more on\\nproviding the ability of managing multiple workloads in multiple clusters on behalf\\nof one application, which is absent in Kubernetes community to the best of our\\nknowledge.\\n\\n## Summary\\n\\nThis blog post introduces UnitedDeployment, a new controller which helps managing \\napplication spread over multiple domains (in arbitrary clusters). \\nIt not only allows evenly distributing Pods over AZs, \\nwhich arguably can be more efficiently done using the new Pod Topology Spread\\nConstraint APIs though, but also enables flexible workload deployment/rollout and\\nsupports multi-cluster use cases in the future."},{"id":"learning-concurrent-reconciling","metadata":{"permalink":"/zh/blog/learning-concurrent-reconciling","editUrl":"https://github.com/openkruise/openkruise.io/tree/master/blog/blog/2019-11-10-learning-concurrent-reconciling.md","source":"@site/blog/2019-11-10-learning-concurrent-reconciling.md","title":"Learning Concurrent Reconciling","description":"The concept of controller in Kubernete is one of the most important reasons that make it successful.","date":"2019-11-10T00:00:00.000Z","formattedDate":"2019\u5e7411\u670810\u65e5","tags":[{"label":"workload","permalink":"/zh/blog/tags/workload"},{"label":"reconcile","permalink":"/zh/blog/tags/reconcile"},{"label":"controller","permalink":"/zh/blog/tags/controller"}],"readingTime":3.915,"truncated":false,"authors":[{"name":"Fei Guo","title":"Maintainer of OpenKruise","url":"https://github.com/Fei-Guo","imageURL":"https://github.com/Fei-Guo.png","key":"Fei-Guo"}],"prevItem":{"title":"UnitedDeploymemt - Supporting Multi-domain Workload Management","permalink":"/zh/blog/uniteddeployment"},"nextItem":{"title":"Kruise Workload Classification Guidance","permalink":"/zh/blog/workload-classification-guidance"}},"content":"The concept of controller in Kubernete is one of the most important reasons that make it successful.\\nController is the core mechanism that supports Kubernetes APIs to ensure the system reaches \\nthe desired state. By leveraging CRDs/controllers and operators, it is fairly easy for \\nother systems to integrate with Kubernetes. \\n\\nController runtime library and the corresponding controller tool [KubeBuilder](https://book.kubebuilder.io/introduction.html)\\nare widely used by many developers to build their customized Kubernetes controllers. In Kruise project,\\nwe also use Kubebuilder to generate scaffolding codes that implement the \\"reconciling\\" logic. \\nIn this blog post, I will share some learnings from\\nKruise controller development, particularly, about concurrent reconciling. \\n\\nSome people may already notice that controller runtime supports concurrent reconciling.\\nCheck for the options ([source](https://github.com/kubernetes-sigs/controller-runtime/blob/81842d0e78f7111f0566156189806e2801e3adf1/pkg/controller/controller.go#L32))\\nused to create new controller:  \\n\\n```\\ntype Options struct {\\n\\t// MaxConcurrentReconciles is the maximum number of concurrent Reconciles which can be run. Defaults to 1.\\n\\tMaxConcurrentReconciles int\\n\\n\\t// Reconciler reconciles an object\\n\\tReconciler reconcile.Reconciler\\n}\\n```\\n\\nConcurrent reconciling is quite useful when the states of the controller\'s watched objects change so\\nfrequently that a large amount of reconcile requests are sent to and queued in the reconcile queue.\\nMultiple reconcile loops do help drain the reconcile queue much more quickly compared to the default single\\nreconcile loop case. Although this is a great feature for performance, without digging into the code,\\nan immediate concern that a developer may raise is that will this introduce consistency issue? \\ni.e., is it possible that two reconcile loops handle the same object at the same time?\\n\\nThe answer is NO, as you may expect. The \\"magic\\" is enforced by the workqueue\\nimplementation in Kubernetes `client-go`, which is used by controller runtime reconcile queue. \\nThe workqueue algorithm ([source](https://github.com/kubernetes/client-go/blob/a57d0056dbf1d48baaf3cee876c123bea745591f/util/workqueue/queue.go#L65))\\nis demonstrated in Figure 1.\\n\\n![workqueue](/img/blog/2019-11-10-learning-concurrent-reconciling/workqueue.png)\\n\\nBasically, the workqueue uses a `queue` and two `sets` to coordinate the process of handling multiple reconciling \\nrequests against the same object. Figure 1(a) presents the initial state of handling four reconcile requests,\\ntwo of which target the same object A. When a request arrives, the target object is first added to the `dirty set`\\nor dropped if it presents in `dirty set`,  and then pushed to the `queue` only if it is not presented in\\n`processing set`. Figure 1(b) shows the case of adding three requests consecutively. \\nWhen a reconciling loop is ready to serve a request, it gets the target object from the `front` of the queue. The\\nobject is also added to the `processing set` and removed from the `dirty set` (Figure 1(c)).\\nNow if a request of the processing object arrives, the object is only added to the `dirty set`, not\\nto the `queue` (Figure 1(d)). This guarantees that an object is only handled by one reconciling\\nloop. When reconciling is done, the object is removed from the `processing set`. If the object is also\\nshown in the `dirty set`, it is added back to the `back` of the `queue` (Figure 1(e)).\\n\\nThe above algorithm has following implications:\\n* It avoids concurrent reconciling for the same object.\\n* The object processing order can be different from arriving order even if there is only one reconciling thread.\\nThis usually would not be a problem since the controller still reconciles to the final cluster state. However,\\nthe out of order reconciling may cause a significant delay for a request. \\n![workqueue-starve](/img/blog/2019-11-10-learning-concurrent-reconciling/workqueue-starve.png).... For example, as illustrated in \\nFigure 2, assuming there is only one reconciling thread and two requests targeting the same object A arrive, one of\\nthem will be processed and object A will be added to the `dirty set` (Figure 2(b)). \\nIf the reconciling takes a long time and during which a large number of new reconciling requests arrive,\\nthe queue will be filled up by the new requests (Figure 2(c)). When reconciling is done, object A will be\\nadded to the `back` of the `queue` (Figure 2(d)). It would not be handled until all the requests coming after had been\\nhandled, which can cause a noticeable long delay. The workaround is actually simple - **USE CONCURRENT RECONCILES**.\\nSince the cost of an idle go routine is fairly small, the overhead of having multiple reconcile threads is\\nlow even if the controller is idle. It seems that the `MaxConcurrentReconciles` value should\\nbe overwritten to a value larger than the default 1 (CloneSet uses 10 for example).\\n* Last but not the least, reconcile requests can be dropped (if the target exists in `dirty set`). This means\\nthat we cannot assume that the controller can track all the object state change events. Recalling a presentation\\ngiven by [Tim Hockin](https://speakerdeck.com/thockin/edge-vs-level-triggered-logic), Kubernetes controller\\nis level triggered, not edge triggered. It reconciles for state, not for events. \\n\\nThanks for reading the post, hope it helps."},{"id":"workload-classification-guidance","metadata":{"permalink":"/zh/blog/workload-classification-guidance","editUrl":"https://github.com/openkruise/openkruise.io/tree/master/blog/blog/2019-10-10-workload-classification-guidance.md","source":"@site/i18n/zh/docusaurus-plugin-content-blog/2019-10-10-workload-classification-guidance.md","title":"Kruise Workload Classification Guidance","description":"Kubernetes \u76ee\u524d\u5e76\u6ca1\u6709\u4e3a\u4e00\u4e2a\u5e94\u7528\u5e94\u8be5\u4f7f\u7528\u54ea\u4e2a\u63a7\u5236\u5668\u63d0\u4f9b\u660e\u786e\u7684\u6307\u5f15\uff0c\u8fd9\u5c24\u5176\u4e0d\u5229\u4e8e\u7528\u6237\u7406\u89e3\u5e94\u7528\u548c workload \u7684\u5173\u7cfb\u3002","date":"2019-10-10T00:00:00.000Z","formattedDate":"2019\u5e7410\u670810\u65e5","tags":[{"label":"workload","permalink":"/zh/blog/tags/workload"}],"readingTime":6.995,"truncated":false,"authors":[{"name":"Fei Guo","title":"Maintainer of OpenKruise","url":"https://github.com/Fei-Guo","imageURL":"https://github.com/Fei-Guo.png","key":"Fei-Guo"},{"name":"Siyu Wang","title":"Maintainer of OpenKruise","url":"https://github.com/FillZpp","imageURL":"https://github.com/FillZpp.png","key":"FillZpp"}],"prevItem":{"title":"Learning Concurrent Reconciling","permalink":"/zh/blog/learning-concurrent-reconciling"}},"content":"Kubernetes \u76ee\u524d\u5e76\u6ca1\u6709\u4e3a\u4e00\u4e2a\u5e94\u7528\u5e94\u8be5\u4f7f\u7528\u54ea\u4e2a\u63a7\u5236\u5668\u63d0\u4f9b\u660e\u786e\u7684\u6307\u5f15\uff0c\u8fd9\u5c24\u5176\u4e0d\u5229\u4e8e\u7528\u6237\u7406\u89e3\u5e94\u7528\u548c workload \u7684\u5173\u7cfb\u3002\\n\u6bd4\u5982\u8bf4\uff0c\u7528\u6237\u901a\u5e38\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u5e94\u8be5\u7528 `Job/CronJob` \u6216\u8005 `DaemonSet`\uff0c\u8fd9\u4e9b workload \u7684\u6982\u5ff5\u662f\u975e\u5e38\u660e\u786e\u7684 -- \u524d\u8005\u662f\u4e3a\u4e86\u4efb\u52a1\u7c7b\u578b\u7684\u5e94\u7528\u90e8\u7f72\u3001\u540e\u8005\u5219\u662f\u9762\u5411\u9700\u8981\u5206\u53d1\u5230\u6bcf\u4e2a node \u4e0a\u7684\u957f\u671f\u8fd0\u884c Pod\u3002\\n\\n\u4f46\u662f\u53e6\u4e00\u4e9b workload \u6bd4\u5982 `Deployment` \u548c `StatefulSet` \u4e4b\u95f4\u7684\u754c\u9650\u662f\u6bd4\u8f83\u6a21\u7cca\u7684\u3002\u4e00\u4e2a\u901a\u8fc7 `Deployment` \u90e8\u7f72\u7684\u5e94\u7528\u4e5f\u53ef\u4ee5\u901a\u8fc7 `StatefulSet` \u90e8\u7f72\uff0c`StatefulSet` \u5bf9 Pod \u7684 `OrderedReady` \u7b56\u7565\u5e76\u975e\u662f\u5f3a\u5236\u7684\u3002\u800c\u4e14\uff0c\u968f\u7740 Kubernetes \u793e\u533a\u4e2d\u8d8a\u6765\u8d8a\u591a\u7684\u81ea\u5b9a\u4e49 controllers/operators \u53d8\u7684\u6210\u719f\uff0c\u7528\u6237\u5c31\u8d8a\u96be\u4ee5\u4e3a\u81ea\u5df1\u7684\u5e94\u7528\u627e\u5230\u4e00\u4e2a\u6700\u5408\u9002\u7684 workload \u6765\u7ba1\u7406\uff0c\u5c24\u5176\u662f\u4e00\u4e9b\u63a7\u5236\u5668\u7684\u529f\u80fd\u4e0a\u90fd\u5b58\u5728\u91cd\u5408\u90e8\u5206\u3002\\n\\nKruise \u5c1d\u8bd5\u5728\u4e24\u4e2a\u65b9\u9762\u6765\u7f13\u89e3\u8fd9\u4e2a\u95ee\u9898\uff1a\\n\\n- \u5728 Kruise \u4e2d\u8c28\u614e\u8bbe\u8ba1\u65b0\u7684\u63a7\u5236\u5668\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u529f\u80fd\u91cd\u590d\u7ed9\u7528\u6237\u6765\u5e26\u56f0\u6270\\n- \u4e3a\u6240\u6709\u63d0\u4f9b\u51fa\u6765\u7684 workload \u63a7\u5236\u5668\u521b\u5efa\u4e00\u4e2a\u5206\u7c7b\u673a\u5236\uff0c\u65b9\u4fbf\u7528\u6237\u66f4\u5bb9\u6613\u7406\u89e3\u5b83\u4eec\u7684\u4f7f\u7528\u573a\u666f\u3002\u6211\u4eec\u4e0b\u9762\u4f1a\u8be6\u7ec6\u63cf\u8ff0\u4e00\u4e0b\uff0c\u9996\u5148\u662f controller \u547d\u540d\u4e0a\u7684\u89c4\u8303\uff1a\\n\\n### Controller \u547d\u540d\u60ef\u4f8b\\n\\n\u4e00\u4e2a\u6613\u4e8e\u7406\u89e3\u7684 controller \u540d\u5b57\u5bf9\u4e8e\u7528\u6237\u9009\u7528\u662f\u975e\u5e38\u6709\u5e2e\u52a9\u7684\u3002\u7ecf\u8fc7\u5bf9\u5185\u5916\u90e8\u4e0d\u5c11 Kubernetes \u7528\u6237\u7684\u54a8\u8be2\uff0c\u6211\u4eec\u51b3\u5b9a\u5728 Kruise \u4e2d\u5b9e\u884c\u4ee5\u4e0b\u7684\u547d\u540d\u60ef\u4f8b\uff08\u8fd9\u4e9b\u60ef\u4f8b\u4e0e\u76ee\u524d\u4e0a\u6e38\u7684 controller \u547d\u540d\u5e76\u4e0d\u51b2\u7a81\uff09\uff1a\\n\\n- **Set** \u540e\u7f00\uff1a\u8fd9\u7c7b controller \u4f1a\u76f4\u63a5\u64cd\u4f5c\u548c\u7ba1\u7406 Pod\uff0c\u6bd4\u5982 `CloneSet`, `ReplicaSet`, `SidecarSet` \u7b49\u3002\u5b83\u4eec\u63d0\u4f9b\u4e86 Pod \u7ef4\u5ea6\u7684\u591a\u79cd\u90e8\u7f72\u3001\u53d1\u5e03\u7b56\u7565\u3002\\n- **Deployment** \u540e\u7f00\uff1a\u8fd9\u7c7b controller \u4e0d\u4f1a\u76f4\u63a5\u5730\u64cd\u4f5c Pod\uff0c\u5b83\u4eec\u901a\u8fc7\u64cd\u4f5c\u4e00\u4e2a\u6216\u591a\u4e2a **Set** \u7c7b\u578b\u7684 workload \u6765\u95f4\u63a5\u7ba1\u7406 Pod\uff0c\u6bd4\u5982 `Deployment` \u7ba1\u7406 `ReplicaSet` \u6765\u63d0\u4f9b\u4e00\u4e9b\u989d\u5916\u7684\u6eda\u52a8\u7b56\u7565\uff0c\u4ee5\u53ca `UnitedDeployment` \u652f\u6301\u7ba1\u7406\u591a\u4e2a `StatefulSet`/`AdvancedStatefulSet` \u6765\u5c06\u5e94\u7528\u90e8\u7f72\u5230\u4e0d\u540c\u7684\u53ef\u7528\u533a\u3002\\n- **Job** \u540e\u7f00\uff1a\u8fd9\u7c7b controller \u4e3b\u8981\u7ba1\u7406\u77ed\u671f\u6267\u884c\u7684\u4efb\u52a1\uff0c\u6bd4\u5982 `BroadcastJob` \u652f\u6301\u5c06\u4efb\u52a1\u7c7b\u578b\u7684 Pod \u5206\u53d1\u5230\u96c6\u7fa4\u4e2d\u6240\u6709 Node \u4e0a\u3002\\n\\n**Set**, **Deployment** \u548c **Job** \u90fd\u662f\u88ab Kubernetes \u793e\u533a\u5e7f\u6cdb\u63a5\u53d7\u7684\u6982\u5ff5\uff0c\u5728 Kruise \u4e2d\u7ed9\u4ed6\u4eec\u5b9a\u4e49\u4e86\u660e\u786e\u7684\u6269\u5c55\u89c4\u8303\u3002\\n\\n\u6211\u4eec\u80fd\u5426\u5bf9\u6709\u76f8\u540c\u540e\u7f00\u7684 controller \u505a\u8fdb\u4e00\u6b65\u533a\u5206\u5462\uff1f\u901a\u5e38\u6765\u8bf4\u524d\u7f00\u524d\u9762\u7684\u540d\u5b57\u5e94\u8be5\u662f\u8ba9\u4eba\u80fd\u4e00\u76ee\u4e86\u7136\u7684\uff0c\u4e0d\u8fc7\u4e5f\u6709\u4e00\u4e9b\u60c5\u51b5\u4e0b\u5f88\u96be\u4e00\u8bed\u63cf\u8ff0 controller \u81ea\u8eab\u7684\u884c\u4e3a\u3002\u53ef\u4ee5\u770b\u4e00\u4e0b `StatefulSet` \u6765\u6e90\u7684\u8fd9\u4e2a [issue](https://github.com/kubernetes/kubernetes/issues/27430)\uff0c\u793e\u533a\u7528\u4e86\u56db\u4e2a\u6708\u7684\u65f6\u95f4\u624d\u51b3\u5b9a\u7528 `StatefulSet` \u8fd9\u4e2a\u540d\u5b57\u4ee3\u66ff\u8fc7\u53bb\u7684 `PetSet`\uff0c\u5c3d\u7ba1\u65b0\u540d\u5b57\u4e5f\u8ba9\u4eba\u770b\u8d77\u6765\u6bd4\u8f83\u56f0\u60d1\u3002\\n\\n\u8fd9\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e86\u6709\u65f6\u5019\u4e00\u4e2a\u7cbe\u5fc3\u8ba1\u5212\u7684\u540d\u5b57\u4e5f\u4e0d\u4e00\u5b9a\u6709\u52a9\u4e8e\u6807\u8bc6\u8fd9\u4e2a controller\u3002\u56e0\u6b64\uff0cKruise \u5e76\u4e0d\u6253\u7b97\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u662f\u901a\u8fc7\u4ee5\u4e0b\u7684\u6807\u51c6\u6765\u5e2e\u52a9\u5bf9 **Set** \u7c7b\u578b\u7684 controller \u5206\u7c7b\u3002\\n\\n### \u56fa\u5b9a Pod \u540d\u5b57\\n\\n`StatefulSet` \u7684\u4e00\u4e2a\u72ec\u6709\u7684\u7279\u6027\u662f\u652f\u6301\u4e00\u81f4\u7684 Pod \u7f51\u7edc\u548c\u5b58\u50a8\u6807\u8bc6\uff0c\u8fd9\u5728\u672c\u8d28\u4e0a\u662f\u901a\u8fc7\u56fa\u5b9a Pod \u540d\u5b57\u6765\u5b9e\u73b0\u7684\u3002Pod \u540d\u5b57\u53ef\u4ee5\u7528\u4e8e\u6807\u8bc6\u7f51\u7edc\u548c\u5b58\u50a8\uff0c\u56e0\u4e3a\u5b83\u662f DNS record \u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f5c\u4e3a PVC \u7684\u540d\u5b57\u3002\u65e2\u7136 `StatefulSet` \u4e0b\u7684 Pod \u90fd\u662f\u901a\u8fc7\u540c\u4e00\u4e2a\u6a21\u677f\u521b\u5efa\u51fa\u6765\u7684\uff0c\u4e3a\u4ec0\u4e48\u9700\u8981\u8fd9\u4e2a\u7279\u6027\u5462\uff1f\u4e00\u4e2a\u5e38\u89c1\u7684\u4f8b\u5b50\u5c31\u662f\u7528\u4e8e\u7ba1\u7406\u5206\u5e03\u5f0f\u4e00\u81f4\u6027\u670d\u52a1\uff0c\u6bd4\u5982 etcd \u6216 Zookeeper\u3002\u8fd9\u7c7b\u5e94\u7528\u9700\u8981\u77e5\u9053\u96c6\u7fa4\u6784\u6210\u7684\u6240\u6709\u6210\u5458\uff0c\u5e76\u4e14\u5728\u91cd\u5efa\u3001\u53d1\u5e03\u540e\u90fd\u9700\u8981\u4fdd\u6301\u539f\u6709\u7684\u7f51\u7edc\u6807\u8bc6\u548c\u78c1\u76d8\u6570\u636e\u3002\u800c\u50cf `ReplicaSet`, `DaemonSet` \u8fd9\u7c7b\u7684\u63a7\u5236\u5668\u662f\u9762\u5411\u65e0\u72b6\u6001\u7684\uff0c\u5b83\u4eec\u5e76\u4e0d\u4f1a\u65b0\u5efa Pod \u65f6\u5e76\u4e0d\u4f1a\u590d\u7528\u8fc7\u53bb\u7684 Pod \u540d\u5b57\u3002\\n\\n\u4e3a\u4e86\u652f\u6301\u6709\u72b6\u6001\uff0c\u63a7\u5236\u5668\u7684\u5b9e\u73b0\u4e0a\u4f1a\u6bd4\u8f83\u56fa\u5b9a\u3002`StatefulSet` \u4f9d\u8d56\u4e8e\u7ed9\u6bcf\u4e2a Pod \u540d\u5b57\u4e2d\u52a0\u5165\u4e00\u4e2a\u5e8f\u53f7\uff0c\u5728\u6269\u7f29\u5bb9\u548c\u6eda\u52a8\u5347\u7ea7\u7684\u65f6\u5019\u90fd\u9700\u8981\u6309\u7167\u8fd9\u4e2a\u5e8f\u53f7\u7684\u987a\u5e8f\u6765\u6267\u884c\u3002\u4f46\u8fd9\u6837\u4e00\u6765\uff0c`StatefulSet` \u4e5f\u5c31\u65e0\u6cd5\u505a\u5230\u53e6\u4e00\u4e9b\u589e\u5f3a\u529f\u80fd\uff0c\u6bd4\u5982\uff1a\\n\\n- \u5f53\u7f29\u5c0f replicas \u65f6\u9009\u62e9\u7279\u5b9a\u7684 Pod \u6765\u5220\u9664\uff0c\u8fd9\u4e2a\u529f\u80fd\u5728\u8de8\u591a\u4e2a\u53ef\u7528\u533a\u90e8\u7f72\u7684\u65f6\u5019\u4f1a\u7528\u5230\u3002\\n- \u628a\u4e00\u4e2a\u5b58\u91cf\u7684 Pod \u63a5\u7ba1\u5230\u53e6\u4e00\u4e2a workload \u4e0b\u9762\uff08\u6bd4\u5982 `StatefulSet`\uff09\\n\\n\u6211\u4eec\u53d1\u73b0\u5f88\u591a\u4e91\u539f\u751f\u5e94\u7528\u5e76\u4e0d\u9700\u8981\u8fd9\u4e2a\u6709\u72b6\u6001\u7684\u7279\u6027\u6765\u56fa\u5b9a Pod \u540d\u5b57\uff0c\u800c `StatefulSet` \u53c8\u5f88\u96be\u5728\u5176\u4ed6\u65b9\u9762\u505a\u6269\u5c55\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cKruise \u53d1\u5e03\u4e86\u4e00\u4e2a\u65b0\u7684\u63a7\u5236\u5668 `CloneSet` \u6765\u7ba1\u7406\u65e0\u72b6\u6001\u5e94\u7528\uff0c`CloneSet` \u63d0\u4f9b\u4e86\u5bf9 PVC \u6a21\u677f\u7684\u652f\u6301\uff0c\u5e76\u4e14\u4e3a\u5e94\u7528\u90e8\u7f72\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u53ef\u9009\u7b56\u7565\u3002\u4ee5\u4e0b\u8868\u4e2d\u6bd4\u8f83\u4e86 Advanced StatefulSet \u548c CloneSet \u4e00\u4e9b\u65b9\u9762\u7684\u80fd\u529b\uff1a\\n\\n| Features   |     Advanced StatefulSet      |  CloneSet |\\n|----------|:-------------:|:------:|\\n| PVC | Yes | Yes |\\n| Pod name | Ordered | Random |\\n| Inplace upgrade | Yes | Yes |\\n| Max unavailable | Yes | Yes |\\n| Selective deletion | No | Yes |\\n| Selective upgrade | No | Yes |\\n| Change Pod ownership | No | Yes |\\n\\n\u76ee\u524d\u5bf9\u4e8e Kruise \u7528\u6237\u7684\u5efa\u8bae\u662f\uff0c\u5982\u679c\u4f60\u7684\u5e94\u7528\u9700\u8981\u56fa\u5b9a\u7684 Pod \u540d\u5b57\uff08\u7f51\u7edc\u548c\u5b58\u50a8\u6807\u8bc6\uff09\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 `Advanced StatefulSet`\uff0c\u5426\u5219 `CloneSet` \u5e94\u8be5\u662f **Set** \u7c7b\u578b\u63a7\u5236\u5668\u7684\u9996\u9009\u3002\\n\\n### \u603b\u7ed3\\n\\nKruise \u4f1a\u4e3a\u5404\u79cd workload \u9009\u62e9\u660e\u786e\u7684\u540d\u5b57\uff0c\u672c\u6587\u76ee\u6807\u662f\u80fd\u4e3a Kruise \u7528\u6237\u63d0\u4f9b\u9009\u62e9\u6b63\u786e controller \u90e8\u7f72\u5e94\u7528\u7684\u6307\u5f15\u3002\\n\u5e0c\u671b\u5bf9\u4f60\u6709\u5e2e\u52a9\uff01"}]}')}}]);