"use strict";(self.webpackChunkopenkruise_io=self.webpackChunkopenkruise_io||[]).push([[8039],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(t),d=o,h=u["".concat(l,".").concat(d)]||u[d]||c[d]||r;return t?a.createElement(h,i(i({ref:n},m),{},{components:t})):a.createElement(h,i({ref:n},m))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3257:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var a=t(7462),o=t(3366),r=(t(7294),t(3905)),i=["components"],s={title:"Kustomize Schema Generator"},l=void 0,p={unversionedId:"cli-tool/kustomize-schema-generator",id:"version-v1.7/cli-tool/kustomize-schema-generator",title:"Kustomize Schema Generator",description:"kruise-api provides tools for openkruise to generate kustomize schema files that support openkruise CRD, and provides the current available OpenAPI schema.",source:"@site/versioned_docs/version-v1.7/cli-tool/kustomize-schema-generator.md",sourceDirName:"cli-tool",slug:"/cli-tool/kustomize-schema-generator",permalink:"/docs/cli-tool/kustomize-schema-generator",draft:!1,editUrl:"https://github.com/openkruise/openkruise.io/edit/master/docs/cli-tool/kustomize-schema-generator.md",tags:[],version:"v1.7",lastUpdatedBy:"berg",lastUpdatedAt:1724814279,formattedLastUpdatedAt:"8/28/2024",frontMatter:{title:"Kustomize Schema Generator"}},m={},c=[{value:"Schema Generator",id:"schema-generator",level:2},{value:"Schema Usage",id:"schema-usage",level:2},{value:"How to specify the schema file",id:"how-to-specify-the-schema-file",level:3},{value:"Example",id:"example",level:3}],u={toc:c};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/openkruise/kruise-api"},"kruise-api")," provides tools for openkruise to generate ",(0,r.kt)("inlineCode",{parentName:"p"},"kustomize schema")," files that support openkruise CRD, and provides the current available ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenAPI schema"),"."),(0,r.kt)("h2",{id:"schema-generator"},"Schema Generator"),(0,r.kt)("p",null,"When using ",(0,r.kt)("inlineCode",{parentName:"p"},"kustomize")," to manage applications, in order to use ",(0,r.kt)("inlineCode",{parentName:"p"},"strategic merge patches (SMPs)")," to process environment variables or any array type fields in resource definitions when using openkruise resources, the ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenAPI schema")," of openkruise CRD needs to contain the specified ",(0,r.kt)("inlineCode",{parentName:"p"},"patch strategy"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"Schema Generator")," supports the function of quickly generating ",(0,r.kt)("inlineCode",{parentName:"p"},"kustomize schema")," files based on the resource definition of openkruise. The specific way of generating ",(0,r.kt)("inlineCode",{parentName:"p"},"kustomize schema")," files can be viewed in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/openkruise/kruise-api/blob/master/cmd/gen-schema/README.md"},"README.md"),"."),(0,r.kt)("h2",{id:"schema-usage"},"Schema Usage"),(0,r.kt)("h3",{id:"how-to-specify-the-schema-file"},"How to specify the schema file"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/openkruise/kruise-api"},"kruise-api")," provides available ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenAPI schema")," files, you can use the latest version or specify the version of the ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenAPI schema")," file, just add the configuration block in ",(0,r.kt)("inlineCode",{parentName:"p"},"kustomization.yaml")," like:"),(0,r.kt)("p",null,"Use the latest version"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"openapi:\n  path: https://raw.githubusercontent.com/openkruise/kruise-api/master/schema/openkruise_all_k8s_kustomize_schema.json\n")),(0,r.kt)("p",null,"Use the specified version"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"openapi:\n  path: https://raw.githubusercontent.com/openkruise/kruise-api/raw/<tag>/schema/openkruise_all_k8s_kustomize_schema.json\n")),(0,r.kt)("p",null,"Or you can download ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/openkruise/kruise-api"},"kruise-api")," to the local, and specify the local file path in the configuration block:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"openapi:\n  path: <kruise-api-local-path>/schema/openkruise_all_k8s_kustomize_schema.json\n")),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"Take ",(0,r.kt)("inlineCode",{parentName:"p"},"sidecarset")," as an example to introduce how to use ",(0,r.kt)("inlineCode",{parentName:"p"},"kustomize OpenAPI schema")," to support the merge strategy of openkruise CRD in kustomize."),(0,r.kt)("p",null,"A complete definition of ",(0,r.kt)("inlineCode",{parentName:"p"},"sidecarset")," is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps.kruise.io/v1alpha1\nkind: SidecarSet\nmetadata:\n  name: test-sidecarset\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  updateStrategy:\n    type: RollingUpdate\n    maxUnavailable: 1\n  containers:\n    - name: sidecar1\n      image: centos:6.7\n      command: ["sleep", "999d"]\n      volumeMounts:\n        - name: log-volume1\n          mountPath: /var/log\n    - name: sidecar2\n      image: centos:6.8\n      command: ["sleep", "999d"] \n      volumeMounts:\n        - name: log-volume2\n          mountPath: /var/log\n  volumes: \n    - name: log-volume1\n      emptyDir: {}\n    - name: log-volume2\n      emptyDir: {}\n')),(0,r.kt)("p",null,"This ",(0,r.kt)("inlineCode",{parentName:"p"},"sidecarset")," currently has two containers, ",(0,r.kt)("inlineCode",{parentName:"p"},"sidecar1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"sidecar2"),", which mount two volumes named ",(0,r.kt)("inlineCode",{parentName:"p"},"log-volume1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"log-volume2")," respectively. Now If you want to add a new container ",(0,r.kt)("inlineCode",{parentName:"p"},"sidecar3"),", mount a new volume named ",(0,r.kt)("inlineCode",{parentName:"p"},"log-volume3"),", delete the ",(0,r.kt)("inlineCode",{parentName:"p"},"sidecar1")," container with corresponding volume, and then make some simple modifications to other fields. Then you can write the ",(0,r.kt)("inlineCode",{parentName:"p"},"kustomization.yaml")," file with the merge strategy as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nresources:\n- sidecarset.yaml\n\nopenapi:\n  path: https://raw.githubusercontent.com/openkruise/kruise-api/master/schema/openkruise_all_k8s_kustomize_schema.json\n\npatchesStrategicMerge:\n- |-\n  apiVersion: apps.kruise.io/v1alpha1\n  kind: SidecarSet\n  metadata:\n    name: test-sidecarset\n  spec:\n    containers:\n      - name: sidecar1\n        $patch: delete\n      - name: sidecar2\n        volumeMounts:\n          - name: log-volume3\n            mountPath: /var/log3\n      - name: sidecar3\n        image: centos:6.9\n        command: ["sleep", "102d"]\n        volumeMounts:\n          - name: log-volume3\n            mountPath: /var/log\n    volumes:\n      - name: log-volume1\n        $patch: delete\n      - name: log-volume3\n        emptyDir: {}\n')),(0,r.kt)("p",null,"The main thing added here is the ",(0,r.kt)("inlineCode",{parentName:"p"},"openapi")," field and the path to the custom ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenAPI schema")," file. At this time, kustomize will determine the merge strategy of different fields according to the ",(0,r.kt)("inlineCode",{parentName:"p"},"x-kubernetes-patch-*")," key in the ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenAPI schema")," file when patching. After executing the command ",(0,r.kt)("inlineCode",{parentName:"p"},"kustomize build ."),", you can get the following results:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps.kruise.io/v1alpha1\nkind: SidecarSet\nmetadata:\n  name: test-sidecarset\nspec:\n  containers:\n  - command:\n    - sleep\n    - 999d\n    image: centos:6.8\n    name: sidecar2\n    volumeMounts:\n    - mountPath: /var/log3\n      name: log-volume3\n    - mountPath: /var/log\n      name: log-volume2\n  - command:\n    - sleep\n    - 102d\n    image: centos:6.9\n    name: sidecar3\n    volumeMounts:\n    - mountPath: /var/log\n      name: log-volume3\n  selector:\n    matchLabels:\n      app: nginx\n  updateStrategy:\n    maxUnavailable: 1\n    type: RollingUpdate\n  volumes:\n  - emptyDir: {}\n    name: log-volume3\n  - emptyDir: {}\n    name: log-volume2\n")),(0,r.kt)("p",null,"You can refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/openkruise/kruise-api/tree/master/test/kustomize/kruise"},"here")," for other common usage examples of openkruise crd merge strategy."))}d.isMDXComponent=!0}}]);