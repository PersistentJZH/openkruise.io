"use strict";(self.webpackChunkopenkruise_io=self.webpackChunkopenkruise_io||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"uniteddeployment","metadata":{"permalink":"/blog/uniteddeployment","editUrl":"https://github.com/openkruise/openkruise.io/tree/master/blog/blog/2019-11-20-uniteddeployment.md","source":"@site/blog/2019-11-20-uniteddeployment.md","title":"UnitedDeploymemt - Supporting Multi-domain Workload Management","description":"Ironically, probably every cloud user knew (or should realized that) failures in Cloud resources","date":"2019-11-20T00:00:00.000Z","formattedDate":"November 20, 2019","tags":[{"label":"workload","permalink":"/blog/tags/workload"},{"label":"uniteddeployment","permalink":"/blog/tags/uniteddeployment"}],"readingTime":6.005,"truncated":false,"authors":[{"name":"Fei Guo","title":"Maintainer of OpenKruise","url":"https://github.com/Fei-Guo","imageURL":"https://github.com/Fei-Guo.png","key":"Fei-Guo"}],"nextItem":{"title":"Learning Concurrent Reconciling","permalink":"/blog/learning-concurrent-reconciling"}},"content":"Ironically, probably every cloud user knew (or should realized that) failures in Cloud resources\\nare inevitable. Hence, high availability is probably one of the most desirable features that\\nCloud Provider offers for cloud users. For example, in AWS, each geographic region has \\nmultiple isolated locations known as Availability Zones (AZs). \\nAWS provides various AZ-aware solutions to allow the compute or storage resources of the user\\napplications to be distributed across multiple AZs in order to tolerate AZ failure, which indeed\\nhappened in the past. \\n\\nIn Kubernetes, the concept of AZ is not realized by an API object. Instead,\\nan AZ is usually represented by a group of hosts that have the same location label.\\nAlthough hosts within the same AZ can be identified by labels, the capability of distributing Pods across\\nAZs was missing in Kubernetes default scheduler. Hence it was difficult to use single \\n`StatefulSet` or `Deployment` to perform  AZ-aware Pods deployment. Fortunately, \\nin Kubernetes 1.16, a new feature called [\\"Pod Topology Spread Constraints\\"](https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/)\\nwas introduced. Users now can add new constraints in the Pod Spec, and scheduler\\nwill enforce the constraints so that Pods can be distributed across failure \\ndomains such as AZs, regions or nodes, in a uniform fashion.\\n\\nIn Kruise, **UnitedDeploymemt** provides an alternative to achieve high availability in\\na cluster that consists of multiple fault domains - that is, managing multiple homogeneous \\nworkloads, and each workload is dedicated to a single `Subset`. Pod distribution across AZs is\\ndetermined by the replica number of each workload.\\nSince each `Subset` is associated with a workload, UnitedDeployment can support\\nfiner-grained rollout and deployment strategies. \\nIn addition, UnitedDeploymemt can be further extended to support\\nmultiple clusters! Let us reveal how UnitedDeployment is designed.\\n\\n\\n## Using `Subsets` to describe domain topology\\n\\nUnitedDeploymemt uses `Subset` to represent a failure domain. `Subset` API\\nprimarily specifies the nodes that forms the domain and the number of replicas, or\\nthe percentage of total replicas, run in this domain. UnitedDeployment manages\\nsubset workloads against a specific domain topology, described by a `Subset` array.\\n\\n```\\ntype Topology struct {\\n\\t// Contains the details of each subset.\\n\\tSubsets []Subset\\n}\\n\\ntype Subset struct {\\n\\t// Indicates the name of this subset, which will be used to generate\\n\\t// subset workload name prefix in the format \'<deployment-name>-<subset-name>-\'.\\n\\tName string\\n\\n\\t// Indicates the node select strategy to form the subset.\\n\\tNodeSelector corev1.NodeSelector\\n\\n\\t// Indicates the number of the subset replicas or percentage of it on the\\n\\t// UnitedDeployment replicas.\\n\\tReplicas *intstr.IntOrString\\n}\\n```\\n\\nThe specification of the subset workload is saved in `Spec.Template`. UnitedDeployment\\nonly supports `StatefulSet` subset workload as of now. An interesting part of `Subset`\\ndesign is that now user can specify **customized Pod distribution** across AZs, which is not\\nnecessarily a uniform distribution in some cases. For example, if the AZ\\nutilization or capacity are not homogeneous, evenly distributing Pods may lead to Pod deployment\\nfailure due to lack of resources. If users have prior knowledge about AZ resource capacity/usage,\\nUnitedDeployment can help to apply an optimal Pod distribution to ensure overall\\ncluster utilization remains balanced. Of course, if not specified, a uniform Pod distribution\\nwill be applied to maximize availability.\\n\\n## Customized subset rollout `Partitions`\\n\\nUser can update all the UnitedDeployment subset workloads by providing a\\nnew version of subset workload template.\\nNote that UnitedDeployment does not control\\nthe entire rollout process of all subset workloads, which is typically done by another rollout\\ncontroller built on top of it. Since the replica number in each `Subset` can be different,\\nit will be much more convenient to allow user to specify the individual rollout `Partition` of each\\nsubset workload instead of using one `Partition` to rule all, so that they can be upgraded in the same pace.\\nUnitedDeployment provides `ManualUpdate` strategy to customize per subset rollout `Partition`.\\n\\n```\\ntype UnitedDeploymentUpdateStrategy struct {\\n\\t// Type of UnitedDeployment update.\\n\\tType UpdateStrategyType\\n\\t// Indicates the partition of each subset.\\n\\tManualUpdate *ManualUpdate\\n}\\n\\ntype ManualUpdate struct {\\n\\t// Indicates number of subset partition.\\n\\tPartitions map[string]int32\\n}\\n```\\n\\n![multi-cluster controller](/img/blog/2019-11-20-uniteddeployment/uniteddeployment-1.png)\\n\\nThis makes it fairly easy to coordinate multiple subsets rollout. For example,\\nas illustrated in Figure 1, assuming UnitedDeployment manages three subsets and\\ntheir replica numbers are 4, 2, 2 respectively, a rollout \\ncontroller can realize a canary release plan of upgrading 50% of Pods in each\\nsubset at a time by setting subset partitions to 2, 1, 1 respectively. \\nThe same cannot be easily achieved by using a single workload controller like `StatefulSet`\\nor `Deployment`.\\n\\n## Multi-Cluster application management (In future)\\n\\nUnitedDeployment can be extended to support multi-cluster workload\\nmanagement. The idea is that `Subsets` may not only\\nreside in one cluster, but also spread over multiple clusters. \\nMore specifically, domain topology specification will associate\\na `ClusterRegistryQuerySpec`, which describes the clusters that UnitedDeployment\\nmay distribute Pods to. Each cluster is represented by a custom resource managed by a\\nClusterRegistry controller using Kubernetes [cluster registry APIs](https://github.com/kubernetes/cluster-registry).\\n\\n```\\ntype Topology struct {\\n  // ClusterRegistryQuerySpec is used to find the all the clusters that\\n  // the workload may be deployed to. \\n  ClusterRegistry *ClusterRegistryQuerySpec\\n  // Contains the details of each subset including the target cluster name and\\n  // the node selector in target cluster.\\n  Subsets []Subset\\n}\\n\\ntype ClusterRegistryQuerySpec struct {\\n  // Namespaces that the cluster objects reside.\\n  // If not specified, default namespace is used.\\n  Namespaces []string\\n  // Selector is the label matcher to find all qualified clusters.\\n  Selector   map[string]string\\n  // Describe the kind and APIversion of the cluster object.\\n  ClusterType metav1.TypeMeta\\n}\\n\\ntype Subset struct {\\n  Name string\\n\\n  // The name of target cluster. The controller will validate that\\n  // the TargetCluster exits based on Topology.ClusterRegistry.\\n  TargetCluster *TargetCluster\\n\\n  // Indicate the node select strategy in the Subset.TargetCluster.\\n  // If Subset.TargetCluster is not set, node selector strategy refers to\\n  // current cluster.\\n  NodeSelector corev1.NodeSelector\\n\\n  Replicas *intstr.IntOrString \\n}\\n\\ntype TargetCluster struct {\\n  // Namespace of the target cluster CRD\\n  Namespace string\\n  // Target cluster name\\n  Name string\\n}\\n```\\n\\nA new `TargetCluster` field is added to the `Subset` API. If it presents, the\\n`NodeSelector` indicates the node selection logic in the target cluster. Now\\nUnitedDeployment controller can distribute application Pods to multiple clusters by\\ninstantiating a `StatefulSet` workload in each target cluster with a specific\\nreplica number (or a percentage of total replica), as illustrated in Figure 2.\\n\\n![multi-cluster\\tcontroller](/img/blog/2019-11-20-uniteddeployment/uniteddeployment-2.png)\\n\\nAt a first glance, UnitedDeployment looks more like a federation\\ncontroller following the design pattern of [Kubefed](https://github.com/kubernetes-sigs/kubefed),\\nbut it isn\'t. The fundamental difference is that Kubefed focuses on propagating arbitrary\\nobject types to remote clusters instead of managing an application across clusters. \\nIn this example, had a Kubefed style controller been used, each `StatefulSet` workload in\\nindividual cluster would have a replica of 100. UnitedDeployment focuses more on\\nproviding the ability of managing multiple workloads in multiple clusters on behalf\\nof one application, which is absent in Kubernetes community to the best of our\\nknowledge.\\n\\n## Summary\\n\\nThis blog post introduces UnitedDeployment, a new controller which helps managing \\napplication spread over multiple domains (in arbitrary clusters). \\nIt not only allows evenly distributing Pods over AZs, \\nwhich arguably can be more efficiently done using the new Pod Topology Spread\\nConstraint APIs though, but also enables flexible workload deployment/rollout and\\nsupports multi-cluster use cases in the future."},{"id":"learning-concurrent-reconciling","metadata":{"permalink":"/blog/learning-concurrent-reconciling","editUrl":"https://github.com/openkruise/openkruise.io/tree/master/blog/blog/2019-11-10-learning-concurrent-reconciling.md","source":"@site/blog/2019-11-10-learning-concurrent-reconciling.md","title":"Learning Concurrent Reconciling","description":"The concept of controller in Kubernete is one of the most important reasons that make it successful.","date":"2019-11-10T00:00:00.000Z","formattedDate":"November 10, 2019","tags":[{"label":"workload","permalink":"/blog/tags/workload"},{"label":"reconcile","permalink":"/blog/tags/reconcile"},{"label":"controller","permalink":"/blog/tags/controller"}],"readingTime":3.915,"truncated":false,"authors":[{"name":"Fei Guo","title":"Maintainer of OpenKruise","url":"https://github.com/Fei-Guo","imageURL":"https://github.com/Fei-Guo.png","key":"Fei-Guo"}],"prevItem":{"title":"UnitedDeploymemt - Supporting Multi-domain Workload Management","permalink":"/blog/uniteddeployment"},"nextItem":{"title":"Kruise Workload Classification Guidance","permalink":"/blog/workload-classification-guidance"}},"content":"The concept of controller in Kubernete is one of the most important reasons that make it successful.\\nController is the core mechanism that supports Kubernetes APIs to ensure the system reaches \\nthe desired state. By leveraging CRDs/controllers and operators, it is fairly easy for \\nother systems to integrate with Kubernetes. \\n\\nController runtime library and the corresponding controller tool [KubeBuilder](https://book.kubebuilder.io/introduction.html)\\nare widely used by many developers to build their customized Kubernetes controllers. In Kruise project,\\nwe also use Kubebuilder to generate scaffolding codes that implement the \\"reconciling\\" logic. \\nIn this blog post, I will share some learnings from\\nKruise controller development, particularly, about concurrent reconciling. \\n\\nSome people may already notice that controller runtime supports concurrent reconciling.\\nCheck for the options ([source](https://github.com/kubernetes-sigs/controller-runtime/blob/81842d0e78f7111f0566156189806e2801e3adf1/pkg/controller/controller.go#L32))\\nused to create new controller:  \\n\\n```\\ntype Options struct {\\n\\t// MaxConcurrentReconciles is the maximum number of concurrent Reconciles which can be run. Defaults to 1.\\n\\tMaxConcurrentReconciles int\\n\\n\\t// Reconciler reconciles an object\\n\\tReconciler reconcile.Reconciler\\n}\\n```\\n\\nConcurrent reconciling is quite useful when the states of the controller\'s watched objects change so\\nfrequently that a large amount of reconcile requests are sent to and queued in the reconcile queue.\\nMultiple reconcile loops do help drain the reconcile queue much more quickly compared to the default single\\nreconcile loop case. Although this is a great feature for performance, without digging into the code,\\nan immediate concern that a developer may raise is that will this introduce consistency issue? \\ni.e., is it possible that two reconcile loops handle the same object at the same time?\\n\\nThe answer is NO, as you may expect. The \\"magic\\" is enforced by the workqueue\\nimplementation in Kubernetes `client-go`, which is used by controller runtime reconcile queue. \\nThe workqueue algorithm ([source](https://github.com/kubernetes/client-go/blob/a57d0056dbf1d48baaf3cee876c123bea745591f/util/workqueue/queue.go#L65))\\nis demonstrated in Figure 1.\\n\\n![workqueue](/img/blog/2019-11-10-learning-concurrent-reconciling/workqueue.png)\\n\\nBasically, the workqueue uses a `queue` and two `sets` to coordinate the process of handling multiple reconciling \\nrequests against the same object. Figure 1(a) presents the initial state of handling four reconcile requests,\\ntwo of which target the same object A. When a request arrives, the target object is first added to the `dirty set`\\nor dropped if it presents in `dirty set`,  and then pushed to the `queue` only if it is not presented in\\n`processing set`. Figure 1(b) shows the case of adding three requests consecutively. \\nWhen a reconciling loop is ready to serve a request, it gets the target object from the `front` of the queue. The\\nobject is also added to the `processing set` and removed from the `dirty set` (Figure 1(c)).\\nNow if a request of the processing object arrives, the object is only added to the `dirty set`, not\\nto the `queue` (Figure 1(d)). This guarantees that an object is only handled by one reconciling\\nloop. When reconciling is done, the object is removed from the `processing set`. If the object is also\\nshown in the `dirty set`, it is added back to the `back` of the `queue` (Figure 1(e)).\\n\\nThe above algorithm has following implications:\\n* It avoids concurrent reconciling for the same object.\\n* The object processing order can be different from arriving order even if there is only one reconciling thread.\\nThis usually would not be a problem since the controller still reconciles to the final cluster state. However,\\nthe out of order reconciling may cause a significant delay for a request. \\n![workqueue-starve](/img/blog/2019-11-10-learning-concurrent-reconciling/workqueue-starve.png).... For example, as illustrated in \\nFigure 2, assuming there is only one reconciling thread and two requests targeting the same object A arrive, one of\\nthem will be processed and object A will be added to the `dirty set` (Figure 2(b)). \\nIf the reconciling takes a long time and during which a large number of new reconciling requests arrive,\\nthe queue will be filled up by the new requests (Figure 2(c)). When reconciling is done, object A will be\\nadded to the `back` of the `queue` (Figure 2(d)). It would not be handled until all the requests coming after had been\\nhandled, which can cause a noticeable long delay. The workaround is actually simple - **USE CONCURRENT RECONCILES**.\\nSince the cost of an idle go routine is fairly small, the overhead of having multiple reconcile threads is\\nlow even if the controller is idle. It seems that the `MaxConcurrentReconciles` value should\\nbe overwritten to a value larger than the default 1 (CloneSet uses 10 for example).\\n* Last but not the least, reconcile requests can be dropped (if the target exists in `dirty set`). This means\\nthat we cannot assume that the controller can track all the object state change events. Recalling a presentation\\ngiven by [Tim Hockin](https://speakerdeck.com/thockin/edge-vs-level-triggered-logic), Kubernetes controller\\nis level triggered, not edge triggered. It reconciles for state, not for events. \\n\\nThanks for reading the post, hope it helps."},{"id":"workload-classification-guidance","metadata":{"permalink":"/blog/workload-classification-guidance","editUrl":"https://github.com/openkruise/openkruise.io/tree/master/blog/blog/2019-10-10-workload-classification-guidance.md","source":"@site/blog/2019-10-10-workload-classification-guidance.md","title":"Kruise Workload Classification Guidance","description":"Kubernetes does not provide a clear guidance about which controller is the best fit for","date":"2019-10-10T00:00:00.000Z","formattedDate":"October 10, 2019","tags":[{"label":"workload","permalink":"/blog/tags/workload"}],"readingTime":5.11,"truncated":false,"authors":[{"name":"Fei Guo","title":"Maintainer of OpenKruise","url":"https://github.com/Fei-Guo","imageURL":"https://github.com/Fei-Guo.png","key":"Fei-Guo"},{"name":"Siyu Wang","title":"Maintainer of OpenKruise","url":"https://github.com/FillZpp","imageURL":"https://github.com/FillZpp.png","key":"FillZpp"}],"prevItem":{"title":"Learning Concurrent Reconciling","permalink":"/blog/learning-concurrent-reconciling"}},"content":"Kubernetes does not provide a clear guidance about which controller is the best fit for\\na user application. Sometimes, this does not seem to be a big problem if users understand\\nboth the application and workload well. For example, users usually know when to choose\\n`Job/CronJob` or `DaemonSet` since the concepts of these workload are straightforward -\\nthe former is designed for temporal batch style applications and the latter is suitable\\nfor long running Pod which is distributed in every node. On the other hand, the usage\\nboundary between `Deployment` and `StatefulSet` is vague. An application managed by\\na `Deployment` conceptually can be managed by a `StatefulSet` as well, the opposite may\\nalso apply as long as the Pod `OrderedReady` capability of `StatefulSet` is not mandatory.\\nFurthermore, as more and more customized controllers/operators become available in Kubernetes\\ncommunity, finding suitable controller can be a nonnegligible user problem especially\\nwhen some controllers have functional overlaps.\\n\\nKruise attempts to mitigate the problem from two aspects:\\n* Carefully design the new controllers in the Kruise suite to avoid unnecessary functional\\nduplications that may confuse users.\\n* Establish a classification mechanism for existing workload controllers so that user\\ncan more easily understand the use cases of them. We will elaborate this more in this\\npost. The first and most intuitive criterion for classification is the controller name.\\n\\n### Controller Name Convention\\nAn easily understandable controller name can certainly help adoption. After consulting\\nwith many internal/external Kubernetes users, we decide to use the following naming\\nconventions in Kruise. Note that these conventions are not contradicted with the controller\\nnames used in upstream controllers.\\n\\n* **Set** -suffix names: This type of controller manages Pods directly. Examples\\ninclude `CloneSet`, `ReplicaSet` and `SidecarSet`. It supports\\nvarious depolyment/rollout strategies in Pod level.\\n\\n* **Deployment** -suffix names: This type of controller does not manage Pods\\ndirectly. Instead, it manages one or many **Set** -suffix workload instances which are\\ncreated on behalf of one application. The controller can provide capabilities\\nto orchestrate the deployment/rollout of multiple instances. For example, `Deployment`\\nmanages `ReplicaSet` and provides rollout capability which is not available in `ReplicaSet`.\\n`UnitedDeployment` (planned in [M3 release](https://github.com/openkruise/kruise/projects))\\nmanages multiple `StatefulSet` created in respect of multiple domains\\n(i.e., fault domains) within one cluster.\\n\\n* **Job** -suffix names: This type of controller manages batch style applications with\\ndifferent depolyment/rollout strategies. For example, `BroadcastJob` distributes a\\njob style Pod to every node in the cluster.\\n\\n**Set**, **Deployment** and **Job** are widely adopted terms in Kubernetes community.\\nKruise leverages them with certain extensions.\\n\\nCan we further distinguish controllers with the same name suffix? Normally the string prior to\\nthe suffix should be self-explainable, but in many cases it is hard to find a right word to\\ndescribe what the controller does. Check to see how `StatefulSet` is originated in\\nthis [thread](https://github.com/kubernetes/kubernetes/issues/27430). It takes four\\nmonths for community to decide to use the name `StatefulSet` to replace the original\\nname `PetSet` although the new name still confuse people by looking\\nat its API documentation. This example showcases that sometimes a well-thought-out name\\nmay not be helpful to identify controller. Again, Kruise does not plan to resolve\\nthis problem. As an incremental effort, Kruise considers the following criterion to help classify\\n**Set** -suffix controllers.\\n\\n\\n### Fixed Pod Name\\nOne unique property of `StatefulSet` is that it maintains consistent identities for\\nPod network and storage. Essentially, this is done by fixing Pod names.\\nPod name can identify both network and storage since it is part of DNS record and\\ncan be used to name Pod volume claim. Why is this property needed given that all Pods in\\n`StatefulSet` are created from the same Pod template?\\nA well known use case is to manage distributed coordination server application such as\\netcd or Zookeeper. This type of application requires the cluster member\\n(i.e., the Pod) to access the same data (in Pod volume) whenever a member is\\nreconstructed upon failure, in order to function correctly. To differentiate the term\\n`State` in `StatefulSet` from the same term used in other computer science areas,\\nI\'d like to associate `State` with Pod name in this document. That being said, controllers\\nlike `ReplicaSet` and `DaemonSet` are `Stateless` since they don\'t require to reuse the\\nold Pod name when a Pod is recreated.\\n\\nSupporting `Stateful` does lead to inflexibility for controller. `StatefulSet` relies on ordinal\\nnumbers to realize fixing Pod names. The workload rollout and scaling\\nhas to be done in a strict order. As a consequence, some useful enhancements to `StatefulSet`\\nbecome impossible. For example,\\n* Selective Pod upgrade and Pod deletion (when scale in). These features can be helpful\\nwhen Pods are spread across different regions or fault domains.\\n* The ability of taking control over existing Pods with arbitrary names. There are\\ncases where Pod creation is done by one controller but Pod lifecycle management\\nis done by another controller (e.g., `StatefulSet`).\\n\\nWe found that many containerized applications do not require the `Stateful` property\\nof fixing Pod names, and `StatefulSet` is hard to be extended for those\\napplications in many cases. To fill the gap, Kruise has released a new controller\\ncalled `CloneSet` to manage the `Stateless` applications. In a nutshell, `CloneSet`\\nprovides PVC support and enriched rollout and management capabilities.\\nThe following table roughly compares Advanced StatefulSet and CloneSet in a few aspects.\\n\\n| Features   |     Advanced StatefulSet      |  CloneSet |\\n|----------|:-------------:|:------:|\\n| PVC | Yes | Yes |\\n| Pod name | Ordered | Random |\\n| Inplace upgrade | Yes | Yes |\\n| Max unavailable | Yes | Yes |\\n| Selective deletion | No | Yes |\\n| Selective upgrade | No | Yes |\\n| Change Pod ownership | No | Yes |\\n\\nNow, a clear recommendation to Kruise users is if your applications require fixed Pod names (identities for Pod network and storage), you can start with `Advanced StatefulSet`.\\nOtherwise, `CloneSet` is the primary choice of **Set** -suffix controllers (if `DaemonSet` is not\\napplicable).\\n\\n### Summary\\nKruise aims to provide intuitive names for new controllers. As a supplement, this post\\nprovides additional guidance for Kruise users to pick the right controller for their\\napplications. Hope it helps!"}]}')}}]);