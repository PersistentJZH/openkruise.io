"use strict";(self.webpackChunkopenkruise_io=self.webpackChunkopenkruise_io||[]).push([[2092],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(a),d=r,h=p["".concat(l,".").concat(d)]||p[d]||m[d]||s;return a?n.createElement(h,i(i({ref:t},c),{},{components:a})):n.createElement(h,i({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<s;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},270:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return m}});var n=a(7462),r=a(3366),s=(a(7294),a(3905)),i=["components"],o={},l="Service Qualities",u={unversionedId:"user-manuals/service-qualities",id:"user-manuals/service-qualities",title:"Service Qualities",description:"Feature overview",source:"@site/kruisegame/user-manuals/service-qualities.md",sourceDirName:"user-manuals",slug:"/user-manuals/service-qualities",permalink:"/kruisegame/user-manuals/service-qualities",draft:!1,tags:[],version:"current",lastUpdatedBy:"skkkkkkk",lastUpdatedAt:1681291192,formattedLastUpdatedAt:"4/12/2023",frontMatter:{},sidebar:"kruisegame",previous:{title:"Startup Sequence Control",permalink:"/kruisegame/user-manuals/container-startup-sequence-control"},next:{title:"Network",permalink:"/kruisegame/user-manuals/network"}},c={},m=[{value:"Feature overview",id:"feature-overview",level:2},{value:"Example",id:"example",level:2},{value:"Set the O&amp;M status of idle game servers to WaitToBeDeleted",id:"set-the-om-status-of-idle-game-servers-to-waittobedeleted",level:3},{value:"Set the O&amp;M status of unhealthy game servers to Maintaining",id:"set-the-om-status-of-unhealthy-game-servers-to-maintaining",level:3}],p={toc:m};function d(e){var t=e.components,o=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"service-qualities"},"Service Qualities"),(0,s.kt)("h2",{id:"feature-overview"},"Feature overview"),(0,s.kt)("p",null,"Because a game server is stateful, a game server usually exists in a pod in the form of a rich container, and multiple processes are managed in a pod in a centralized manner.\nHowever, the processes in a pod vary in importance. If an error occurs in a lightweight process, you may not want to delete and recreate the entire pod. Therefore, the native liveness probe feature of Kubernetes does not suit gaming scenarios.\nIn OpenKruiseGame, the service quality of game servers is defined by game developers. Game developers can set handling actions based on the statuses of game servers. The custom service quality feature is a combination of probing and action. This combination helps automatically deal with various issues related to game server statuses."),(0,s.kt)("h2",{id:"example"},"Example"),(0,s.kt)("h3",{id:"set-the-om-status-of-idle-game-servers-to-waittobedeleted"},"Set the O&M status of idle game servers to WaitToBeDeleted"),(0,s.kt)("p",null,"Deploy a GameServerSet that contains the custom service quality field."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},'cat <<EOF | kubectl apply -f -\napiVersion: game.kruise.io/v1alpha1\nkind: GameServerSet\nmetadata:\n  name: minecraft\n  namespace: default\nspec:\n  replicas: 3\n  gameServerTemplate:\n    spec:\n      containers:\n        - image: registry.cn-hangzhou.aliyuncs.com/gs-demo/gameserver:idle\n          name: minecraft\n  updateStrategy:\n    rollingUpdate:\n      podUpdatePolicy: InPlaceIfPossible\n      maxUnavailable: 100%\n  serviceQualities: # Set the service quality named idle.\n    - name: idle\n      containerName: minecraft\n      permanent: false\n      # Similar to the native probe feature, a script is executed to probe whether a game server is idle, that is, whether no player joins the game server.\n      exec:\n        command: ["bash", "./idle.sh"]\n      serviceQualityAction:\n          # If no player joins the game server, the O&M status of the game server is set to WaitToBeDeleted.\n        - state: true\n          opsState: WaitToBeDeleted\n          # If players join the game server, the O&M status of the game server is set to None.\n        - state: false\n          opsState: None\nEOF\n')),(0,s.kt)("p",null,"After the deployment is completed, because no players have joined the game servers, all game servers are idle and their O&M status is WaitToBeDeleted."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get gs\nNAME          STATE   OPSSTATE          DP    UP\nminecraft-0   Ready   WaitToBeDeleted   0     0\nminecraft-1   Ready   WaitToBeDeleted   0     0\nminecraft-2   Ready   WaitToBeDeleted   0     0\n")),(0,s.kt)("p",null,"When a player accesses the game server minecraft-1, the O&M status of the game server changes to None."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get gs\nNAME          STATE   OPSSTATE          DP    UP\nminecraft-0   Ready   WaitToBeDeleted   0     0\nminecraft-1   Ready   None              0     0\nminecraft-2   Ready   WaitToBeDeleted   0     0\n")),(0,s.kt)("p",null,"In this case, if game servers are scaled in, game servers other than minecraft-1 are deleted first."),(0,s.kt)("h3",{id:"set-the-om-status-of-unhealthy-game-servers-to-maintaining"},"Set the O&M status of unhealthy game servers to Maintaining"),(0,s.kt)("p",null,"Deploy a GameServerSet that contains the custom service quality field."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},'cat <<EOF | kubectl apply -f -\napiVersion: game.kruise.io/v1alpha1\nkind: GameServerSet\nmetadata:\n  name: demo-gs\n  namespace: default\nspec:\n  replicas: 3\n  gameServerTemplate:\n    spec:\n      containers:\n        - image: registry.cn-hangzhou.aliyuncs.com/gs-demo/gameserver:healthy\n          name: minecraft\n  updateStrategy:\n    rollingUpdate:\n      podUpdatePolicy: InPlaceIfPossible\n      maxUnavailable: 100%\n  serviceQualities: # Set the service quality named healthy.\n    - name: idle\n      containerName: minecraft\n      permanent: false\n      # Similar to the native probe feature, a script is executed to probe whether a game server is healthy.\n      exec:\n        command: ["bash", "./healthy.sh"]\n      serviceQualityAction:\n          # If the game server is healthy, the O&M status of the game server is set to None.\n        - state: true\n          opsState: None\n          # If the game server is unhealthy, the O&M status of the game server is set to Maintaining.\n        - state: false\n          opsState: Maintaining\nEOF\n')),(0,s.kt)("p",null,"After the deployment is completed, because all the game servers are healthy, the O&M status of all the game servers is None."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get gs\nNAME        STATE   OPSSTATE   DP    UP\ndemo-gs-0   Ready   None       0     0\ndemo-gs-1   Ready   None       0     0\ndemo-gs-2   Ready   None       0     0\n")),(0,s.kt)("p",null,"Simulate a failure of a process on the game server demo-gs-0. Then, the O&M status of this game server changes to Maintaining."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get gs\nNAME        STATE   OPSSTATE     DP    UP\ndemo-gs-0   Ready   Maintaining  0     0\ndemo-gs-1   Ready   None         0     0\ndemo-gs-2   Ready   None         0     0\n")),(0,s.kt)("p",null,'In this case, the game server controller sends the event "GameServer demo-gs-0 Warning". You can use the ',(0,s.kt)("a",{parentName:"p",href:"https://github.com/AliyunContainerService/kube-eventer"},"kube-event project")," to implement exception notification."),(0,s.kt)("p",null,(0,s.kt)("img",{src:a(8894).Z,width:"558",height:"223"})),(0,s.kt)("p",null,"In addition, OpenKruiseGame will integrate the tools that are used to automatically troubleshoot and recover game servers in the future to enhance automated O&M capabilities for game servers."))}d.isMDXComponent=!0},8894:function(e,t,a){t.Z=a.p+"assets/images/warning-ding-5b4cdf9f5265811b0852883ce42976b1.png"}}]);