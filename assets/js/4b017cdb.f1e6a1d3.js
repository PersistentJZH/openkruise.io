"use strict";(self.webpackChunkopenkruise_io=self.webpackChunkopenkruise_io||[]).push([[5140],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,v=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?o.createElement(v,i(i({ref:t},c),{},{components:n})):o.createElement(v,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5697:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var o=n(87462),a=n(63366),r=(n(67294),n(3905)),i=["components"],l={},s="Traffic Routing with Istio",p={unversionedId:"best-practices/traffic-routing-istio-api",id:"best-practices/traffic-routing-istio-api",title:"Traffic Routing with Istio",description:"FEATURE STATE: Kruise Rollout v0.5.0",source:"@site/rollouts/best-practices/traffic-routing-istio-api.md",sourceDirName:"best-practices",slug:"/best-practices/traffic-routing-istio-api",permalink:"/rollouts/best-practices/traffic-routing-istio-api",draft:!1,tags:[],version:"current",lastUpdatedBy:"rk",lastUpdatedAt:1724817070,formattedLastUpdatedAt:"8/28/2024",frontMatter:{},sidebar:"rollouts",previous:{title:"Extensible Traffic Routing Based on Lua Script",permalink:"/rollouts/developer-manuals/custom-network-provider"}},c={},d=[{value:"A Complete Release Process",id:"a-complete-release-process",level:2},{value:"Deploy deployment <code>workload-demo</code> and service <code>service-demo</code>",id:"deploy-deployment-workload-demo-and-service-service-demo",level:3},{value:"Deploy VirtualService <code>vs-demo</code> which routes traffic to <code>service-demo</code>",id:"deploy-virtualservice-vs-demo-which-routes-traffic-to-service-demo",level:3},{value:"Deploy Rollout <code>rollouts-demo</code>",id:"deploy-rollout-rollouts-demo",level:3},{value:"Upgrade deployment <code>workload-demo</code>",id:"upgrade-deployment-workload-demo",level:3}],u={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"traffic-routing-with-istio"},"Traffic Routing with Istio"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"FEATURE STATE:")," Kruise Rollout v0.5.0"),(0,r.kt)("p",null,"This page is a demo to show how to utilize Kruise Rollout to do traffic routing with Istio."),(0,r.kt)("h2",{id:"a-complete-release-process"},"A Complete Release Process"),(0,r.kt)("h3",{id:"deploy-deployment-workload-demo-and-service-service-demo"},"Deploy deployment ",(0,r.kt)("inlineCode",{parentName:"h3"},"workload-demo")," and service ",(0,r.kt)("inlineCode",{parentName:"h3"},"service-demo")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Service\nmetadata:\n  name: service-demo\nspec:\n  ports:\n  - port: 80\n    name: http\n  selector:\n    app: nginx\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: workload-demo\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n        env:\n        - name: version\n          value: base\n        ports:\n        - containerPort: 80\n")),(0,r.kt)("h3",{id:"deploy-virtualservice-vs-demo-which-routes-traffic-to-service-demo"},"Deploy VirtualService ",(0,r.kt)("inlineCode",{parentName:"h3"},"vs-demo")," which routes traffic to ",(0,r.kt)("inlineCode",{parentName:"h3"},"service-demo")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: vs-demo\nspec:\n  gateways:\n  - simple-gateway\n  hosts:\n    - "*"\n  http:\n  - route:\n      - destination:\n          host: service-demo\n')),(0,r.kt)("h3",{id:"deploy-rollout-rollouts-demo"},"Deploy Rollout ",(0,r.kt)("inlineCode",{parentName:"h3"},"rollouts-demo")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: rollouts.kruise.io/v1beta1\nkind: Rollout\nmetadata:\n  name: rollouts-demo\nspec:\n  workloadRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: workload-demo\n  strategy:\n    canary:\n      steps:\n      - replicas: 1\n        matches:\n        - headers:\n          - type: Exact\n            name: version\n            value: canary\n      - traffic: 50%\n        replicas: 50%\n      - traffic: 80%\n        replicas: 80%\n      trafficRoutings:\n      - service: mocka\n        customNetworkRefs:\n        - apiVersion: networking.istio.io/v1alpha3\n          kind: VirtualService\n          name: vs-demo\n")),(0,r.kt)("p",null,"When you apply a new revision for workload-demo, Kruise Rollout will modify configuration of VirtualService to comply with release strategies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A new canary Deployment will be created, and its replicas is 1. Traffic with header ",(0,r.kt)("inlineCode",{parentName:"li"},"version=canary")," will be routed to the new-version pods while other traffic will be routed to stable-version pods."),(0,r.kt)("li",{parentName:"ul"},'Update the replicas of canary Deployment to "50%" of workload-demo and route 50% of traffic to new-version pods.'),(0,r.kt)("li",{parentName:"ul"},'Update the replicas of canary Deployment to "80%" of workload-demo and route 80% of traffic to new-version pods.')),(0,r.kt)("h3",{id:"upgrade-deployment-workload-demo"},"Upgrade deployment ",(0,r.kt)("inlineCode",{parentName:"h3"},"workload-demo")),(0,r.kt)("p",null,"Run the following command to update env ",(0,r.kt)("inlineCode",{parentName:"p"},"version: base")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"version: canary")," to start release."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'$ kubectl patch deployment workload-demo -p \\\n\'{"spec":{"template":{"spec":{"containers":[{"name":"nginx", "env":[{"name":"version", "value":"canary"}]}]}}}}\'\n')),(0,r.kt)("p",null,"Wait a while, Kruise Rollout will do the following work for you:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Pause the base Deployment."),(0,r.kt)("li",{parentName:"ul"},"Create a new Deployment with env ",(0,r.kt)("inlineCode",{parentName:"li"},"version: canary"),"."),(0,r.kt)("li",{parentName:"ul"},"Create a new Service ",(0,r.kt)("inlineCode",{parentName:"li"},"service-demo-canary")," to route traffic to new-version pods."),(0,r.kt)("li",{parentName:"ul"},"Update VirtualService ",(0,r.kt)("inlineCode",{parentName:"li"},"vs-demo")," to do traffic routing.")),(0,r.kt)("p",null,"After the first release step is done, check VirtualService ",(0,r.kt)("inlineCode",{parentName:"p"},"vs-demo")," and you will see:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  annotations:\n    rollouts.kruise.io/original-spec-configuration: \'{"spec":{"gateways":["simple-gateway"],"hosts":["*"],"http":[{"route":[{"destination":{"host":"service-demo"}}]}]},"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\\"apiVersion\\":\\"networking.istio.io/v1beta1\\",\\"kind\\":\\"VirtualService\\",\\"metadata\\":{\\"annotations\\":{},\\"name\\":\\"vs-demo\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"gateways\\":[\\"simple-gateway\\"],\\"hosts\\":[\\"*\\"],\\"http\\":[{\\"route\\":[{\\"destination\\":{\\"host\\":\\"service-demo\\"}}]}]}}\\n"}}\'\n  name: vs-demo\nspec:\n  gateways:\n  - simple-gateway\n  hosts:\n  - \'*\'\n  http:\n  # route traffic with header version=canary to new-version pods\n  - match:\n    - headers:\n        version:\n          exact: canary\n    route:\n    - destination:\n        host: service-demo-canary\n  - route:\n    - destination:\n        host: service-demo\n\n')),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl-kruise rollout approve rollout/rollouts-demo -n default")," to start second release step. After the second release step is done, check VirtualService ",(0,r.kt)("inlineCode",{parentName:"p"},"vs-demo")," and you will see:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  annotations:\n    rollouts.kruise.io/original-spec-configuration: \'{"spec":{"gateways":["simple-gateway"],"hosts":["*"],"http":[{"route":[{"destination":{"host":"service-demo"}}]}]},"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\\"apiVersion\\":\\"networking.istio.io/v1beta1\\",\\"kind\\":\\"VirtualService\\",\\"metadata\\":{\\"annotations\\":{},\\"name\\":\\"vs-demo\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"gateways\\":[\\"simple-gateway\\"],\\"hosts\\":[\\"*\\"],\\"http\\":[{\\"route\\":[{\\"destination\\":{\\"host\\":\\"service-demo\\"}}]}]}}\\n"}}\'\n  name: vs-demo\nspec:\n  gateways:\n  - simple-gateway\n  hosts:\n  - \'*\'\n  http:\n  - route:\n    - destination:\n        host: service-demo\n      weight: 50\n    - destination:\n        host: service-demo-canary\n      weight: 50 # route 50% traffic to new-version pods\n')),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl-kruise rollout approve rollout/rollouts-demo -n default")," to start third release step. After the third release step is done, check VirtualService ",(0,r.kt)("inlineCode",{parentName:"p"},"vs-demo")," and you will see:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  annotations:\n    rollouts.kruise.io/original-spec-configuration: \'{"spec":{"gateways":["simple-gateway"],"hosts":["*"],"http":[{"route":[{"destination":{"host":"service-demo"}}]}]},"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\\"apiVersion\\":\\"networking.istio.io/v1beta1\\",\\"kind\\":\\"VirtualService\\",\\"metadata\\":{\\"annotations\\":{},\\"name\\":\\"vs-demo\\",\\"namespace\\":\\"default\\"},\\"spec\\":{\\"gateways\\":[\\"simple-gateway\\"],\\"hosts\\":[\\"*\\"],\\"http\\":[{\\"route\\":[{\\"destination\\":{\\"host\\":\\"service-demo\\"}}]}]}}\\n"}}\'\n  name: vs-demo\nspec:\n  gateways:\n  - simple-gateway\n  hosts:\n  - \'*\'\n  http:\n  - route:\n    - destination:\n        host: service-demo\n      weight: 20\n    - destination:\n        host: service-demo-canary\n      weight: 80 # route 80% traffic to new-version pods\n')),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl-kruise rollout approve rollout/rollouts-demo -n default")," to complete the release, Kruise Rollout will do some finalising work:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Delete the canary Deployment."),(0,r.kt)("li",{parentName:"ul"},"Delete the canary Service ",(0,r.kt)("inlineCode",{parentName:"li"},"service-demo-canary"),"."),(0,r.kt)("li",{parentName:"ul"},"Resume the base Deployment."),(0,r.kt)("li",{parentName:"ul"},"Restore the VirtualService ",(0,r.kt)("inlineCode",{parentName:"li"},"vs-demo"),".")),(0,r.kt)("p",null,"After that, the release is done and your are ready to use the new-version service."))}m.isMDXComponent=!0}}]);