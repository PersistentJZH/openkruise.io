"use strict";(self.webpackChunkopenkruise_io=self.webpackChunkopenkruise_io||[]).push([[7759],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=l(t),d=r,f=p["".concat(c,".").concat(d)]||p[d]||u[d]||s;return t?a.createElement(f,o(o({ref:n},m),{},{components:t})):a.createElement(f,o({ref:n},m))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4556:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var a=t(7462),r=t(3366),s=(t(7294),t(3905)),o=["components"],i={},c="Deploy Gameservers",l={unversionedId:"user-manuals/deploy-gameservers",id:"user-manuals/deploy-gameservers",title:"Deploy Gameservers",description:"\u201cHello World\u201d of OKG",source:"@site/kruisegame/user-manuals/deploy-gameservers.md",sourceDirName:"user-manuals",slug:"/user-manuals/deploy-gameservers",permalink:"/kruisegame/user-manuals/deploy-gameservers",draft:!1,tags:[],version:"current",lastUpdatedBy:"ChrisLiu",lastUpdatedAt:1714353603,formattedLastUpdatedAt:"4/29/2024",frontMatter:{},sidebar:"kruisegame",previous:{title:"Design Concept",permalink:"/kruisegame/design-concept"},next:{title:"Hot Update",permalink:"/kruisegame/user-manuals/hot-update"}},m={},u=[{value:"\u201cHello World\u201d of OKG",id:"hello-world-of-okg",level:2},{value:"ID awareness",id:"id-awareness",level:2},{value:"Service discovery of game server stateful instances",id:"service-discovery-of-game-server-stateful-instances",level:2},{value:"Service registration",id:"service-registration",level:3},{value:"DNS",id:"dns",level:3},{value:"Synchronization of Annotations from GameServer to Pod",id:"synchronization-of-annotations-from-gameserver-to-pod",level:2}],p={toc:u};function d(e){var n=e.components,t=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"deploy-gameservers"},"Deploy Gameservers"),(0,s.kt)("h2",{id:"hello-world-of-okg"},"\u201cHello World\u201d of OKG"),(0,s.kt)("p",null,"You can use GameServerSet to deploy game servers. A simple deployment case is as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"cat <<EOF | kubectl apply -f -\napiVersion: game.kruise.io/v1alpha1\nkind: GameServerSet\nmetadata:\n  name: minecraft\n  namespace: default\nspec:\n  replicas: 3\n  updateStrategy:\n    rollingUpdate:\n      podUpdatePolicy: InPlaceIfPossible\n  gameServerTemplate:\n    spec:\n      containers:\n        - image: registry.cn-hangzhou.aliyuncs.com/acs/minecraft-demo:1.12.2\n          name: minecraft\nEOF\n")),(0,s.kt)("p",null,"After the GameServerSet is created, three game servers and three corresponding pods appear in the cluster, because the specified number of replicas is 3."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get gss\nNAME        AGE\nminecraft   9s\n\nkubectl get gs\nNAME          STATE   OPSSTATE   DP    UP   AGE\nminecraft-0   Ready   None       0     0    10s\nminecraft-1   Ready   None       0     0    10s\nminecraft-2   Ready   None       0     0    10s\n\nkubectl get pod\nNAME            READY   STATUS    RESTARTS   AGE\nminecraft-0     1/1     Running   0          10s\nminecraft-1     1/1     Running   0          10s\nminecraft-2     1/1     Running   0          10s\n")),(0,s.kt)("h2",{id:"id-awareness"},"ID awareness"),(0,s.kt)("p",null,"Due to the stateful nature of game servers, they usually need unique identifiers to distinguish each other. This is why the name of the GameServer managed by GameServerSet ends with an ID number."),(0,s.kt)("p",null,"In some cases, the game server business itself needs to be aware of its own ID, which can be used as a regional server attribute mark or a basis for configuration management.\nAt this time, the corresponding identification ID can be sunk into the container through DownwardAPI. Here's an example:"),(0,s.kt)("p",null,"Deploy a GameServerSet, and the environment variable GS_NAME in the generated game server container will have the corresponding name as its value:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: game.kruise.io/v1alpha1\nkind: GameServerSet\nmetadata:\n  name: minecraft\n  namespace: default\nspec:\n  replicas: 3\n  updateStrategy:\n    rollingUpdate:\n      podUpdatePolicy: InPlaceIfPossible\n  gameServerTemplate:\n    spec:\n      containers:\n        - image: registry.cn-hangzhou.aliyuncs.com/acs/minecraft-demo:1.12.2\n          name: minecraft\n          env:\n          - name: GS_NAME\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.name\n")),(0,s.kt)("p",null,"3 game servers will be generated:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get gs\nNAME          STATE   OPSSTATE   DP    UP    AGE\nminecraft-0   Ready   None       0     0     31s\nminecraft-1   Ready   None       0     0     31s\nminecraft-2   Ready   None       0     0     31s\n")),(0,s.kt)("p",null,"Check the GS_NAME environment variables of these three game servers separately and find that the GS_NAME of the three game servers corresponds to their own names."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl exec  minecraft-0 -- env | grep GS_NAME\nGS_NAME=minecraft-0\n\nkubectl exec  minecraft-1 -- env | grep GS_NAME\nGS_NAME=minecraft-1\n\nkubectl exec  minecraft-2 -- env | grep GS_NAME\nGS_NAME=minecraft-2\n")),(0,s.kt)("p",null,"In this way, the game program can perform configuration management and other operations by parsing the GS_NAME environment variable when it is started."),(0,s.kt)("h2",{id:"service-discovery-of-game-server-stateful-instances"},"Service discovery of game server stateful instances"),(0,s.kt)("p",null,"Due to the stateful nature of game servers, access often requires specific pod instances, and the load balancing features of traditional k8s services cannot be used. OKG supports the DNS mechanism of stateful services to achieve interactive access between game servers within the cluster."),(0,s.kt)("p",null,"The following example will involve two services, the minecraft game server and the accessor. Minecraft is called by the accessor."),(0,s.kt)("h3",{id:"service-registration"},"Service registration"),(0,s.kt)("p",null,"Normally, when a game server needs to be accessed internally, it needs to register its own information with the corresponding service so that the accessor can know which pods are accessible; correspondingly, when the game server exits, it also needs corresponding structural actions, such as deregistration. The accessor knows that the pod no longer provides services."),(0,s.kt)("p",null,"As mentioned earlier, the only identifier of the game server is its ID (or name). Use the DownwardAPI mentioned above to sink GS_NAME into the container, and then register it with the corresponding service when the container starts."),(0,s.kt)("p",null,"After the Yaml deployment is completed according to the previous article, there are 3 minecraft pods in the cluster:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get po -owide\n...\nminecraft-0     1/1     Running   0     10s     172.16.0.64     xxx       <none>           2/2\nminecraft-1     1/1     Running   0     10s     172.16.0.6      xxx       <none>           2/2\nminecraft-2     1/1     Running   0     10s     172.16.0.12     xxx       <none>           2/2\n")),(0,s.kt)("h3",{id:"dns"},"DNS"),(0,s.kt)("p",null,"In order to enable the pod of the game server to be accessed individually, in addition to deploying GameServerSet, it is also necessary to deploy a headless service with the same name as GameServerSet. In this example, its Yaml is as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Service\nmetadata:\n  name: minecraft\nspec:\n  clusterIP: None\n  selector:\n    game.kruise.io/owner-gss: minecraft # Fill in the name of GameServerSet\n")),(0,s.kt)("p",null,"Deploy a simple accessor Yaml to access the corresponding minecraft pod within the container"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: game.kruise.io/v1alpha1\nkind: GameServerSet\nmetadata:\n  name: accessor\n  namespace: default\nspec:\n  replicas: 1\n  gameServerTemplate:\n    spec:\n      containers:\n        - image: busybox\n          name: accessor\n          args:\n            - sleep\n            - "3600"\n          command: ["/bin/sh", "-c", "sleep 3600"]\n')),(0,s.kt)("p",null,"Enter the accessor container and ping the corresponding minecraft pod (this step simulates the access logic in the real environment. Of course, choosing which pod to access requires certain filtering rules):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl exec -it accessor-0 /bin/sh\n/ # \n/ # ping minecraft-2.minecraft.default.svc.cluster.local\nPING minecraft-2.minecraft.default.svc.cluster.local (172.16.0.12): 56 data bytes\n64 bytes from 172.16.0.12: seq=0 ttl=63 time=0.082 ms\n64 bytes from 172.16.0.12: seq=1 ttl=63 time=0.061 ms\n64 bytes from 172.16.0.12: seq=2 ttl=63 time=0.072 ms\n")),(0,s.kt)("p",null,"It can be found that the accessor successfully accessed minecraft-2, and the DNS successfully resolved to the corresponding intranet IP address. The DNS rules here are as follows: {pod-name}.{gss-name}.{namespace-name}.svc.cluster.local"),(0,s.kt)("h2",{id:"synchronization-of-annotations-from-gameserver-to-pod"},"Synchronization of Annotations from GameServer to Pod"),(0,s.kt)("p",null,"As mentioned above, through the DownwardAPI, information from pod annotations can be propagated downwards into containers. Sometimes, we wish to synchronize the annotations of a GameServer to its Pod, in order to complete the action of sinking GameServer metadata information."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl patch gs minecraft-0 --type=\'merge\' -p \'{"metadata":{"annotations":{"gs-sync/test-key":"some-value"}}}\'\ngameserver.game.kruise.io/minecraft-0 patched\n')),(0,s.kt)("p",null,'OKG supports the synchronization of annotations from GameServer to Pod starting with "gs-sync/," as demonstrated below:'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get po minecraft-0 -oyaml | grep gs-sync\n    gs-sync/test-key: some-value\n")))}d.isMDXComponent=!0}}]);